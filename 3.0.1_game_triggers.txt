[19:56:08][game_application.cpp:1895]: 
== TRIGGER DOCUMENTATION ==
text - For 'desc={trigger={' use. Shows custom text
text = <text>
Supported Scopes: all

not - An inverted trigger
Supported Scopes: all

custom_tooltip - Replaces the tooltips for the enclosed triggers with a custom text
custom_tooltip = {
	text = <text used as fallback for both fails and successes>
fail_text = <text used for fails["string"/default/none]>
success_text = <text used for seccesses["string"/default/none]>
	<triggers>
}
Supported Scopes: all

if - Evaluates the triggers if the display_triggers of the limit are met
if = { limit = { <display_triggers> } <triggers> }
Supported Scopes: all

any_playable_country - Iterate through all playable countries - checks whether the enclosed triggers return true for any of them
any_playable_country = { <count=<num/all>> <triggers> }
Supported Scopes: all

has_mission - Checks if the observation post has a specific mission
has_mission = technological_enlightenment_4
Supported Scopes: fleet

switch - Switch case for a trigger
switch = {
	trigger = pop_has_ethic
	ethic_xenophile = { <trigger> }
	ethic_xenophobe = { <trigger> }
	default = { <trigger> }
}
Supported Scopes: all

num_fleets - Checks the country's number of fleets
num_fleets < 8
Supported Scopes: country

num_ships - Checks the country/fleet's number of ships
num_ships > 39
Supported Scopes: country fleet

research_leader - Checks if the country's researcher in a specific field meets the specified criteria
research_leader = { area = engineering <triggers> }
Supported Scopes: country

has_fleet_order - Checks if the ship/fleet has a specific fleet order. Fleet orders include: move_to_system_point_order orbit_planet_order build_orbital_station_order build_space_station_order colonize_planet_order survey_planet_order research_discovery_orde research_anomaly_order collect_data_fleet_order upgrade_design_at_starbase_fleet_order upgrade_design_at_orbitable_fleet_order return_fleet_order repair_fleet_order evade_hostiles_order follow_order assist_research_order land_armies_order merge_fleet_order aggressive_stance_fleet_order auto_explore_order auto_patrol_order build_megastructure_fleet_order destroy_planet_order planet_killer_weapon_windup_order planet_killer_weapon_fire_order explore_bypass_order use_bypass_order jumpdrive_order  jumpdrive_windup experimental_subspace_navigation_fleet_order excavate_archaeological_site_fleet_order
has_fleet_order = survey_planet_order
Supported Scopes: ship fleet

closest_system - Finds the closest system within the given hyperlane steps and limit = { <triggers> }. If this system does not exist, it returns false. If it does exist, it is checked against the triggers outside of the limit = {}.
closest_system = {
	limit = { <triggers> }
	min_steps = 2
	max_steps = 20
	use_bypasses = yes/no (default: no)
	<triggers>
}
Supported Scopes: all

any_owned_fleet - Iterate through each fleet owned by the country - checks whether the enclosed triggers return true for any of them
any_owned_fleet = { <count=<num/all>> <triggers> }
Supported Scopes: country

has_orbital_station - Checks if the planet has any kind of orbital station
has_orbital_station = yes
Supported Scopes: planet

any_orbital_station - Checks if the planet's orbital station meets the specified criteria
any_orbital_station = { <triggers> }
Supported Scopes: planet

else_if - Evaluates the enclosed triggers if the display_triggers of the preceding `if` or `else_if` is not met and its own display_trigger of the limit is met
if = { limit = { <display_triggers> } <triggers> }
else_if = { limit = { <display_triggers> } <triggers> }
Supported Scopes: all

happiness - Checks the pop's happiness percentage
happiness < 90
Supported Scopes: pop

is_half_species - Check if scoped species is half species of specific/any species
is_half_species = <target/any>
Supported Scopes: species

faction_approval - Checks the scoped faction's approval percentage
faction_approval < 0.9
Supported Scopes: pop_faction

has_designation - Checks if the colony has a certain designation
has_designation = col_rural/<planet scope>
Supported Scopes: planet

colony_type - Checks if the colony is of a certain type
colony_type = col_rural/<planet scope>
Supported Scopes: planet

num_favors - Check amount of favors that scoped country can collect from target country:
num_favors = {
	target = <country>
	value ><= <value>
}

Supported Scopes: country

last_building_changed - Checks if the last building queued/unqueued/built/demolished/upgraded was the specified building
last_building_changed = building_capitol
Supported Scopes: planet

empire_size - Checks the empire's size. Identical to empire_spraw trigger.
empire_size < 20
Supported Scopes: country

empire_sprawl - Checks the empire's sprawl. Identical to empire_size trigger.
empire_sprawl < 20
Supported Scopes: country

empire_sprawl_over_cap - Checks how much the empire sprawl is over its admin capacity
empire_sprawl_over_cap < 5
Supported Scopes: country

empire_sprawl_cap_fraction - Checks the empire's sprawl compared to its admin level
empire_sprawl_cap_fraction < 0.5
Supported Scopes: country

last_district_changed - Checks if the last district queued/unqueued/built/demolished/upgraded was the specified district
last_district_changed = district_capitol
Supported Scopes: planet

has_ring - Checks if the planet has a planetary ring
has_ring = yes
Supported Scopes: planet

is_moon - Checks if the planet is the moon of another planet
is_moon = yes
Supported Scopes: planet

opinion - Checks the country's opinion of the target country
opinion = { who = <target> value = -70 }
Supported Scopes: country

opinion_level - Checks the country's opinion level of the target country (with support for comparison operators)
opinion_level = { who = <target> level >= neutral }
Supported Scopes: country

envoy_opinion_change - Checks the country's opinion of the target country has been changed by envoys
envoy_opinion_change = { who = <target> value >= 25 }
Supported Scopes: country

ideal_planet_class - Checks if the pop, species or country's ideal planet class is a specific class
ideal_planet_class = pc_tundra/<planet scope>
Supported Scopes: country pop species

ethos - Checks the average ethics divergence on the planet, i.e. num of pops not of the country's ethics / total num of pops
ethos < 0.4
Supported Scopes: planet

distance - Checks the ship/fleet/planet/leader/pop/system's galaxy map distance to target in absolute units
distance = {
	source = <target>
	min_distance >= 50
	max_distance <= 120
	type=<hyperlane/euclidean>
	bypass_empire=<empire>
	min_jumps = 2
	max_jumps = 10
	same_solar_system = yes/no (default: no; this toggles whether the trigger checks galaxy map or solar system distances)
}
Supported Scopes: megastructure planet ship pop fleet galactic_object leader ambient_object starbase deposit archaeological_site first_contact

is_pirate - Checks if the country is a pirate country
is_pirate = yes
Supported Scopes: country

planet_size - Checks the planet's size
planet_size < 20
Supported Scopes: planet

gender - Checks the leader's gender
gender = female/male/indeterminable
Supported Scopes: leader

any_planet_within_border - Iterate through each planet within the current empire's borders - checks whether the enclosed triggers return true for any of them
any_planet_within_border = { <count=<num/all>> <triggers> }
Supported Scopes: country

any_owned_ship - Iterate through each ship in the fleet or owned by the country - checks whether the enclosed triggers return true for any of them
any_owned_ship = { <count=<num/all>> <triggers> }
Supported Scopes: country fleet

pop_has_ethic - Checks if the pop has a specific ethos
pop_has_ethic = ethic_fanatic_xenophile
Supported Scopes: pop

pop_has_trait - Checks if the pop has a specific trait
pop_has_trait = trait_decadent
Supported Scopes: pop

has_observation_outpost - Checks if the planet has an observation post
has_observation_outpost = yes
Supported Scopes: planet

starting_system - Checks if the system is the starting system for any country
starting_system = yes
Supported Scopes: galactic_object

graphical_culture - Checks if the country has specific graphical culture
graphical_culture = fungoid_01
Supported Scopes: country ship

is_civilian - Checks if the scoped fleet or ship is civilian (as set in ship sizes).
is_civilian = <yes/no>
Supported Scopes: ship fleet

vassals - Checks the country's number of vassals
vassals > 0
Supported Scopes: country

exists - Checks if a target scope exists
exists = <target>
Supported Scopes: all

has_edict - Checks if the country has a specific edict enabled
has_edict = crystal_sonar
Supported Scopes: country

is_designable - Checks if the scoped ship design, ship or fleet (all ships) has a designable ship size.
is_designable = yes
Supported Scopes: ship fleet design

is_in_cluster - Checks if the planet/system belongs to a specific spawning cluster
is_in_cluster = resource_cluster_3
Supported Scopes: planet galactic_object

any_moon - Iterate through each moon of the planet - checks whether the enclosed triggers return true for any of them
any_moon = { <count=<num/all>> <triggers> }
Supported Scopes: planet

num_empires - Checks the number of regular empires in the galaxy
num_empires > 3
Supported Scopes: country

leader_class - Checks if the leader is of a specific class
leader_class = scientist
Supported Scopes: leader

leader_age - Checks the scope leader's age
leader_age > 85
Supported Scopes: leader

observation_outpost - Checks if the planet's observation post meets the specified criteria
observation_outpost = { <triggers> }
Supported Scopes: planet

has_deposit - Checks if the planet has any, or a specific, deposit
has_deposit = yes
has_deposit = d_immense_engineering_deposit
Supported Scopes: planet deposit

is_same_value - Checks if the current scope and the target scope are the same thing
is_same_value = <target>
Supported Scopes: all

intel - Checks the country's Intel on the target country
intel = { who = <target> value = 70 }
Supported Scopes: country

has_pop_faction_flag - Checks if the pop faction has a specific flag
has_pop_faction_flag = <flag>
Supported Scopes: pop pop_faction

num_communications - Checks the country's number of established communications
num_communications > 3
Supported Scopes: country

last_changed_policy - Checks if the last policy changed by the country was a specific policy
last_changed_policy = slavery
Supported Scopes: country

is_species - Checks if the pop/country's founder species is of a specific pre-defined species
is_species = ROBOT_POP_SPECIES_2
Supported Scopes: country pop leader species

last_increased_tech - Checks if the country's last researched technology was a specific tech
last_increased_tech = tech_gene_expressions
Supported Scopes: country

any_war - Iterate through all wars the country is engaged in - checks whether the enclosed triggers return true for any of them
any_war = { <count=<num/all>> <triggers> }
Supported Scopes: country

any_defender - Iterate through all defenders in the current war - checks whether the enclosed triggers return true for any of them
any_defender = { <count=<num/all>> <triggers> }
Supported Scopes: war

any_attacker - Iterate through all attackers in the current war - checks whether the enclosed triggers return true for any of them
any_attacker = { <count=<num/all>> <triggers> }
Supported Scopes: war

original_owner - Checks if the planet is still owned by its first colonizer
original owner = yes
Supported Scopes: planet

tech_unlocked_ratio - Checks the relative amount of already-researched tech between the country and target country
tech_unlocked_ratio = { who = <target> ratio = 0.4 }
Supported Scopes: country

can_colonize - Checks if the planet can be colonized by target country
can_colonize = { who = <target> status = yes }
Supported Scopes: planet

has_special_project - Checks if the country has a specific special project available
has_special_project = EMERGENCY_BUOY_PROJECT
Supported Scopes: country

has_completed_special_project_in_log - Checks if the country has completed a specific special project as part of an in-progress event chain
has_completed_special_project_in_log = EMERGENCY_BUOY_PROJECT
Supported Scopes: country

has_failed_special_project_in_log - Checks if the country has failed, timed out or aborted a specific special project as part of an in-progress event chain
has_failed_special_project_in_log = EMERGENCY_BUOY_PROJECT
Supported Scopes: country

is_subspecies - Checks if the pop/country/species is a subspecies of the target species
is_subspecies = <target>
Supported Scopes: country pop leader species

is_valid - Checks to see if target scope is valid for the country/planet/army
is_valid = yes/no
Supported Scopes: planet country army

check_pop_faction_parameter - Checks if one of the faction's parameters is the same as target scope
check_pop_faction_parameter = { which = <parameter> value = <target> }
Supported Scopes: pop_faction

is_robot_pop - Checks if the pop is a robot
is_robot_pop = yes
Supported Scopes: pop

num_fallen_empires - Checks the number of fallen empires in the galaxy
num_fallen_empires > 3
Supported Scopes: country

is_preferred_weapons - Checks if the country's AI prefers weapons using this component tag
is_preferred_weapons = weapon_type_energy
Supported Scopes: country

has_access_fleet - Checks if the target country is allowed to enter the system
has_access_fleet = <target>
Supported Scopes: galactic_object

is_point_of_interest - Checks if the planet/country/ship/system/ambient object has a specific point of interest for a specific event chain for a specific country
is_point_of_interest = { id = <id> event_chain = <event_chain> owner = <target> }
Supported Scopes: planet country ship galactic_object ambient_object

terraformed_by - Checks if planet is terraformed by country.
terraformed_by = <scope>
Supported Scopes: planet

has_megastructure - Checks if a country or star has a mega structure.
has_megastructure = spy_orb_4
Supported Scopes: country galactic_object

recently_lost_war - Checks if the country recently lost a war ('recently' meaning recent enough to have a truce)
recently_lost_war = yes
Supported Scopes: country

count_diplo_ties - Checks the number of diplomatic in the scope that fulfill the specified criteria
count_diplo_ties = { count < 6 limit = { <triggers> } }
Supported Scopes: country

has_research_agreement - Checks if two countries have a research agreement.
has_research_agreement = <target>
Supported Scopes: country

has_tributary - Checks if the target country is a tributary of the current scope.
has_tributary = <target>
Supported Scopes: country

upgrade_days_left - Checks how many days an upgrading megastructure will take to complete its upgrade.
upgrade_days_left > 360
Supported Scopes: megastructure

has_any_megastructure - Checks if the scope has a megastructure
has_any_megastructure = yes
Supported Scopes: planet galactic_object

former_living_standard_type - Compares the former living standard type with the given one.
former_living_standard_type = living_standard_normal
Supported Scopes: pop

former_citizenship_type - Compares the former citizenship type with the given one.
former_citizenship_type = citizenship_full
Supported Scopes: pop

former_military_service_type - Compares the former military service type with the given one.
former_military_service_type = military_service_full
Supported Scopes: pop

former_slavery_type - Compares the former slavery type with the given one.
former_slavery_type = slavery_normal
Supported Scopes: pop

former_purge_type - Compares the former purge type with the given one.
former_purge_type = purge_normal
Supported Scopes: pop

former_population_control_type - Compares the former population control type with the given one.
former_population_control_type = population_control_yes
Supported Scopes: pop

former_migration_control_type - Compares the former migration control type with the given one.
former_migration_control_type = migration_control_yes
Supported Scopes: pop

is_alliance_fleet - Checks if the scoped fleet is an alliance fleet.
is_alliance_fleet = <yes/no>
Supported Scopes: fleet

is_researching_special_project - Checks if the country is currently researching a specific special project
is_researching_special_project = special_project_name
Supported Scopes: country leader

last_activated_relic - Checks if the specified relic was the last activated one 
last_activated_relic = <relic_key>
Supported Scopes: country

any_system_planet - Iterate through each planet in the current system - checks whether the enclosed triggers return true for any of them
any_system_planet = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

is_scope_type - Checks currently in the specified scope:
is_scope_type = fleet
valid tokens are: none, megastructure, planet, country, ship, pop, fleet, galactic_object, leader, army, ambient_object, species, design,pop_faction, war, alliance, starbase,deposit,observer, sector.

Supported Scopes: all

is_robotic - Check if the species in the scope is a robot species or not
is_robotic=<yes/no>
Supported Scopes: species

has_unlocked_all_traditions - Checks if the country has unlocked all traditions
has_unlocked_all_traditions = yes/no
Supported Scopes: country

has_potential_claims - Checks if the country has any potential claims they can make.
has_potential_claims = yes/no
Supported Scopes: country

has_available_jobs - Check that you have available job of a specific type
has_available_jobs = "miner"
Supported Scopes: planet

is_galactic_custodian - Checks if an empire is Custodian of the Galactic Council
is_galactic_custodian = yes/no
Supported Scopes: country

has_galactic_custodian - Checks if the Galactic Community has named a Custodian
has_galactic_custodian = yes/no
Supported Scopes: all

is_galactic_emperor - Checks if an empire is the Galactic Emperor
is_galactic_emperor = yes/no
Supported Scopes: country

has_galactic_emperor - Checks if the Galactic Emperor has taken over
has_galactic_emperor = yes/no
Supported Scopes: all

imperial_authority - Checks imperial authority.
imperial_authority >=< 40
Supported Scopes: all

has_stage_modifier - Checks if the espionage operation has a certain modifier specific for the current stage
has_modifier = <modifier>
Supported Scopes: espionage_operation

galactic_defense_force_exists - Checks if the Galactic Defense Force or Imperial Armada exists
galactic_defense_force_exists = yes/no
Supported Scopes: all

has_intel_level - Checks the country's intel level on a category for the target country
has_intel_level = { who = <target> category = economy level = 2 }
Supported Scopes: country

has_intel_report - Checks if the country has intel report of at least the specified level on a category for the target country
has_intel_report = { who = <target> category = economy level = 2 }
Supported Scopes: country

has_intel - Checks if the specified intel is available for the target country (stale intel will not return true)
has_intel = { who = <target> intel = system_low_intel }
Supported Scopes: country

has_stale_intel - Checks if the specified intel is stale for the target country (available intel will not return true)
has_stale_intel = { who = <target> intel = system_low_intel }
Supported Scopes: country

and - all inside trigger must be true
Supported Scopes: all

or - At least one entry inside the trigger must be true
Supported Scopes: all

is_star - Checks if the planet is a star
is_star = yes
Supported Scopes: planet

is_asteroid - Checks if the planet is an asteroid
is_asteroid = yes
Supported Scopes: planet

species_portrait - Checks if the species (or pop/empire's dominant species) uses a certain portrait
species_portrait = rep13
Supported Scopes: country pop species

is_neutral_to - Checks if the country has a neutral attitude towards target country
is_neutral_to = <target>
Supported Scopes: country

trust - Checks the country's trust of the target country
trust = { who = <target> value = 50 }
Supported Scopes: country

name_list_category - Checks if a specific name list is used for the a species during empire creation
Supported Scopes: dlc_recommendation

hidden_trigger - Hides the tooltip for the triggers within
hidden_trigger = { <triggers> }
Supported Scopes: all

has_district - Checks if the planet has any, or a specific, district
has_district = yes
has_district = district_mining
Supported Scopes: planet

free_district_slots - Checks the planet's number of slots available for new constructions
free_district_slots > 2
Supported Scopes: planet

diplomacy_weight - Checks the countrys diplomacy weight
diplomacy_weight > 200
Supported Scopes: country

has_owner - Checks if the planet is colonized (in planet scope) or the system has an owner (in system scope)
has_owner = yes
Supported Scopes: planet galactic_object

free_housing - Checks the planet's available housing
free_housing > 5
Supported Scopes: planet

is_ai - Checks if the country is played by the AI
is_ai = no
Supported Scopes: country

always - Sets trigger to be either always true or false
always = yes
Supported Scopes: all

has_trait - Checks if a pop/leader/species/country's dominant species has a certain trait
has_trait = leader_trait_carefree
Supported Scopes: country pop leader species dlc_recommendation

has_ethic - Checks if a country has a certain ethos
has_ethic = ethic_fanatic_pacifist
Supported Scopes: country pop dlc_recommendation

is_owned_by - Checks if the planet/system/army/ship is owned by the target country
is_owned_by = <target>
Supported Scopes: megastructure planet ship pop fleet galactic_object leader army pop_faction starbase deposit sector archaeological_site first_contact spy_network espionage_operation

pop_can_live_on_planet - Checks if the pop's species is allowed to live on its planet
pop_can_live_on_planet = yes
Supported Scopes: pop

days_passed - Checks the number of in-game days passed since the 2200.1.1 start
days_passed < 15
Supported Scopes: all

free_amenities - Checks the planet's available amenities
free_amenities > 5
Supported Scopes: planet

has_deficit - Checks if the country has a deficit of the defined resource
has_deficit = minerals
Supported Scopes: country

has_commercial_pact - Check if the country has a commercial pact with target country
has_commercial_pact = <target>
Supported Scopes: country

is_being_assimilated - Checks if the pop is being purged
is_being_assimilated = yes
Supported Scopes: pop

num_guaranteed_colonies - Checks the number of guaranteed colonies defined in setup
num_guaranteed_colonies > 1
Supported Scopes: all

num_owned_relics - Checks the number of relics owned by the scoped country
num_owned_relics > 1
Supported Scopes: country

has_branch_office - Check if the planet has a branch office owned by target country/any country/no country
has_branch_office = <target/yes/no>
Supported Scopes: planet

is_same_species - checks if the scoped object is of the same species as another object
is_same_species = <target>
Supported Scopes: country ship pop leader army species

is_criminal_syndicate - Checks if the country is a criminal syndicate
is_criminal_syndicate = yes
Supported Scopes: country

is_blocker - Checks if scoped deposit is a blocker-type
is_blocker = yes
Supported Scopes: deposit

is_same_empire - Checks if the country is the same as another, target country
is_same_empire = <target>
Supported Scopes: country

free_branch_office_building_slots - Checks the planet's number of branch office slots available for new constructions
free_branch_office_building_slots > 2
Supported Scopes: planet

branch_office_value - Checks the planet's branch officevalue
branch_office_value = { who = <target> value > 10 }
Supported Scopes: planet

free_jobs - Checks the number of jobs compared to pops on the planet
free_jobs > 12
Supported Scopes: planet

is_planet_class - Checks if the planet is of a certain class
is_planet_class = pc_tundra/<planet scope>
Supported Scopes: planet

has_strategic_resource - Checks if the planet has any strategic resource
has_strategic_resource = yes
Supported Scopes: planet

is_star_class - Checks if the system/planet(star) is of a certain class
is_star_class = sc_black_hole/<system scope>
Supported Scopes: planet galactic_object

has_technology - Checks if the country has a technology (of at least a specific level)
has_technology = tech_spaceport_4
Supported Scopes: country

can_research_technology - Checks whether the current country is allowed to have the specified technology, i.e. does it fulfil the potential = { } field for that tech, and for any prereq techs that tech has.
can_research_technology = <tech key>
Supported Scopes: country

can_copy_random_tech_from - Checks whether the target country has a technology the current country can steal via copy_random_tech_from effect
can_copy_random_tech_from = {
	who = <country>
	category = computing (optional)
	area = physics (optional)
}
Supported Scopes: country

can_set_policy - Checks if the country is allowed to set its policy to a specific one using set_policy effect
can_set_policy = { policy = <key> option = <key> }
Supported Scopes: country

any_fleet_in_orbit - Iterate through each fleet orbiting the current planet/starbase/megastructure - checks whether the enclosed triggers return true for any of them
any_fleet_in_orbit = { <count=<num/all>> <triggers> }
Supported Scopes: megastructure planet starbase

planet_devastation - Checks the planet's devastation
planet_devastation > 10
Supported Scopes: planet

is_pop_category - Checks if the pop has the chosen pop category
is_pop_category = <key>
Supported Scopes: pop

won_the_game - Checks if scoped country won the game
won_the_game = yes
Supported Scopes: country

planet_stability - Compares the stability present on the planet with the given value
planet_stability > 50
Supported Scopes: planet

perc_communications_with_playable - Checks the country's percentage of communications with playable empires
perc_communications_with_playable > 0.3
Supported Scopes: country

planet_crime - Compares the crime present on the planet with the given value
planet_crime > 50
Supported Scopes: planet

has_job - Checks if the pop has a specific job, or any job if set to yes
has_job = <key/yes>
Supported Scopes: pop

has_planet_modifier - Checks if the planet has a specific planet modifier
has_planet_modifier = pm_titanic_life
Supported Scopes: planet

is_deposit_type - Checks if deposit is specified type
is_deposit_type = d_immense_engineering_deposit
Supported Scopes: deposit

has_built_species - Checks if country has a built species defined
has_built_species = yes/no
Supported Scopes: country

num_buildings - Checks the number the planet has of any, or a specific, building
num_buildings = { type = <key/any> value > 2 }
Supported Scopes: planet

num_districts - Checks the number the planet has of any, or a specific, district
num_districts = { type = <key/any> value > 2 }
Supported Scopes: planet

num_free_districts - Checks the number of available slots the planet has of any, or a specific, district
num_free_districts = { type = <key/any> value > 2 }
Supported Scopes: planet

has_planet_flag - Checks if the planet has a specific flag
has_planet_flag = <flag>
Supported Scopes: planet

has_first_contact_flag - Checks if the first contact site has a specific flag
has_first_contact_flag = <flag>
Supported Scopes: first_contact

has_federation_flag - Checks if the federation has a specific flag
has_federation_flag = <flag>
Supported Scopes: federation

has_country_flag - Checks if the empire has a specific flag
has_country_flag = <flag>
Supported Scopes: country

has_fleet_flag - Checks if the fleet has a specific flag
has_fleet_flag = <flag>
Supported Scopes: fleet

has_ship_flag - Checks if the ship has a specific flag
has_ship_flag = <flag>
Supported Scopes: ship

is_ship_class - Checks if the ship/fleet/design is a specific class
is_ship_class = shipclass_colonizer
Supported Scopes: ship fleet design

is_ship_size - Checks if the ship/fleet/design is a specific ship size
is_ship_size = mining_station
Supported Scopes: ship fleet design

is_capital - Checks if the planet is its owner's capital
is_capital = yes
Supported Scopes: planet

is_capital_system - Checks if the solar system has its owner's capital
is_capital_system = yes
Supported Scopes: galactic_object

has_ground_combat - Checks if ground combat is taking place on the planet
has_ground_combat = yes
Supported Scopes: planet

is_at_war - Checks if the country is at war
is_at_war = yes
Supported Scopes: country

num_owned_planets - Checks the country's or sector's number of owned planets
num_owned_planets < 8
Supported Scopes: country sector

has_government - Checks if the country has a specific government type, or any government at all
has_government = <yes/any/no/none/type>
Supported Scopes: country

num_pops - Checks the number of pops on the planet/country/pop faction/sector
num_pops > 12
Supported Scopes: planet country pop_faction sector

num_unemployed - Checks the number of unemployed pops on the planet
num_unemployed > 3
Supported Scopes: planet

would_work_job - Checks if the pop will work a specific job if a vacancy becomes available (i.e. does it meet the requirements, would it have a higher job weight?)
would_work_job = <key>
Supported Scopes: pop

is_primitive - Checks if the country is a primitive, pre-FTL civilization
is_primitive = yes
Supported Scopes: country

is_archetype - Checks if species has specified archetype:
is_archetype = PRESAPIENT
Supported Scopes: species

is_inside_nebula - checks if the planet/ship/fleet/system is inside a nebula
is_inside_nebula = yes
Supported Scopes: planet ship fleet galactic_object

is_in_frontier_space - checks if the planet/ship/fleet/system is in frontier space
is_in_frontier_space = yes
Supported Scopes: planet ship fleet galactic_object

is_inside_border - Checks if the planet/ship/fleet/system is inside the borders of the target country
is_inside_border = <target>
Supported Scopes: planet ship fleet galactic_object

any_country - Iterate through all countries - checks whether the enclosed triggers return true for any of them
any_country = { <count=<num/all>> <triggers> }
Supported Scopes: all

any_pop - Checks if any of the planet/species/pop faction pops meet the specified criteria. Warning: deprecated, use any_owned_pop/any_species_pop
any_pop = { <triggers> }
Supported Scopes: planet species pop_faction

is_overlord - Checks if the country is the overlord of any subject countries
is_overlord = yes
Supported Scopes: country

is_at_war_with - Checks if the country is at war with the target country
is_at_war_with = <target>
Supported Scopes: country

their_opinion - Checks target country's opinion value of the current country
their_opinion = { who = <target> value > 25 }
Supported Scopes: country

is_same_species_class - Checks if the pop/country is of the same species class as another pop/country
is_same_species_class = <target>
Supported Scopes: country ship pop leader army species

has_federation - Checks if the country is in a federation
has_federation = yes
Supported Scopes: country

is_colonizable - Checks if the planet can theoretically be colonized
is_colonizable = yes
Supported Scopes: planet

has_level - Checks if the leader has a specific experience level
has_level > 2
Supported Scopes: leader

num_minerals - Checks the planet's total amount of minerals
num_minerals < 20
Supported Scopes: planet

num_physics - Checks the planet's total amount of physics research
num_physics = 8
Supported Scopes: planet

num_society - Checks the planet's total amount of society research
num_society > 8
Supported Scopes: planet

num_engineering - Checks the planet's total amount of engineering research
num_engineering < 8
Supported Scopes: planet

num_modifiers - Checks the planet's number of modifiers
num_modifiers < 3
Supported Scopes: planet

has_any_strategic_resource - Checks if the planet has any strategic resource
has_any_strategic_resource = yes
Supported Scopes: planet

has_pop_flag - Checks if the pop has a specific flag
has_pop_flag = <flag>
Supported Scopes: pop

is_occupied_flag - Checks if the planet is under military occupation
is_occupied_flag = yes
Supported Scopes: planet

is_damaged - Checks if the ship is damaged
is_damaged = yes
Supported Scopes: ship

has_hp - Checks the ship's hull points
has_hp > 200
Supported Scopes: ship

is_surveyed - Checks if the planet/system has been survey by target country
is_surveyed = { who = <target> status = yes }
Supported Scopes: planet galactic_object

has_global_flag - Checks if a Global Flag has been set
has_global_flag = <flag>
Supported Scopes: all

is_variable_set - Checks if the specified variable is set on the current scope. Use to avoid unset variables errors
is_variable_set = my_var
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

check_variable - Checks a variable for the country/leader/planet/system/fleet
check_variable = { which = <variable> value < <float>/<variable>/<scope> / value = { scope = <scope> variable >=< <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

check_variable_arithmetic - Checks a variable for the scope if a certain amount of arithmetic is done to it (note: the variable's value is not changed by this trigger)
check_variable_arithmetic = {
	which = <variable>
	by = <float>/<variable>/<scope> / by = { scope = <scope> variable = <variable> }
	mode = add/subtract/multiply/divide/modulo
	value < <float>/<variable>/<scope> / value = { scope = <scope> variable >=< <variable> }
}
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

check_modifier_value - Checks the value of a specified modifier in the current scope against a value.
check_modifier_value = { modifier = pop_growth_speed_reduction value > 1.05
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species design pop_faction spy_network espionage_operation

check_galaxy_setup_value - Checks the value for a specific option from the galaxy setup 
check_galaxy_setup_value = { setting = <string> value >=< <float> ] }
possible values: num_empires, num_advanced_empires, num_fallen_empires, num_marauder_empires, mid_game_year, end_game_year, victory_year, num_guaranteed_colonies, num_gateways, num_wormhole_pairs, num_hyperlanes, habitable_worlds_scale, primitive_worlds_scale, crisis_strength_scale, tech_costs_scale
Supported Scopes: all

is_colony - Checks if the planet is colonized
is_colony = yes
Supported Scopes: planet

habitability - Checks the planet's habitability (0 to 1) for target pop/species
habitability = { who = <target> value = 0.6 }
Supported Scopes: planet

has_building - Checks if the planet has any, or a specific, building
has_building = yes
has_building = building_capital_3
Supported Scopes: planet

has_active_building - Checks if the planet has a specific building, and that that building is not disabled or ruined.
has_building = yes
has_active_building = building_capital_3
Supported Scopes: planet

is_controlled_by - Checks if the planet is controlled by the target country
is_controlled_by = <target>
Supported Scopes: planet

is_terraformed - Checks if the planet has ever been terraformed
is_terraformed = yes
Supported Scopes: planet

is_terraforming - Checks if the planet is currently being terraformed
is_terraforming = yes
Supported Scopes: planet

is_federation_leader - Checks if the country is the leader of their federation
is_federation_leader = yes
Supported Scopes: country

is_mobile - Checks if the scoped fleet can move.
is_mobile = <yes/no>
Supported Scopes: fleet

is_in_sensor_range - Checks if the specified ship, fleet, planet or system is within sensor range of the scoped country.
is_in_sensor_range = <ship/fleet/system>
Supported Scopes: country

is_in_sensor_range_of_country - Checks if the scoped ship, fleet, planet or system is within sensor range of the specified country.
is_in_sensor_rangeof_country = root.owner
Supported Scopes: planet ship fleet galactic_object

has_star_flag - Checks if the solar system has a specific flag
has_star_flag = <flag>
Supported Scopes: galactic_object dlc_recommendation

has_mining_station - Checks if the planet has an orbital mining station
has_mining_station = yes
Supported Scopes: planet

has_research_station - Checks if the planet has an orbital research station
has_research_station = yes
Supported Scopes: planet

any_research_station - Checks if the planet's orbital research station meets the specified criteria
any_research_station = { <triggers> }
Supported Scopes: planet

any_mining_station - Checks if the planet's orbital mining station meets the specified criteria
any_mining_station = { <triggers> }
Supported Scopes: planet

army_type - Checks the army's type
army_type = assault_army
Supported Scopes: army

is_defensive_army - Checks if the army is defensive
is_defensive_army = yes
Supported Scopes: army

has_army - Checks if the planet has an army
has_army = yes
Supported Scopes: planet

is_advisor_active - checks if a country has an advisor
Supported Scopes: country

count_pops - Checks the number of pops in the scope that fulfill the specified criteria. Warning: deprecated, use count_owned_pop/count_species_pop
count_pops = { limit = { <triggers> } count < 6 }
Supported Scopes: planet species pop_faction

is_enslaved - Checks if the pop is a slave
is_enslaved = yes
Supported Scopes: pop

is_being_purged - Checks if the pop is being purged
is_being_purged = yes
Supported Scopes: pop

is_idle - Checks if scoped leader is idle
is_idle = yes
Supported Scopes: leader

income - Checks the country's monthly energy credit income
income < 90
Supported Scopes: country

expenses - Checks the country's monthly energy credit expenses
expenses > 28
Supported Scopes: country

num_uncleared_blockers - Checks the planet's total amount of uncleared blockers
num_uncleared_blockers > 3
Supported Scopes: planet

local_human_species_class - Checks if local humans founder species is a specific species class
is_species_class = MAM
Supported Scopes: all

num_envoys_to_federation - Checks the country's number of envoys sent to its federation
num_envoys_to_federation < 2
Supported Scopes: country

num_envoys_to_galcom - Checks the country's number of envoys sent to the galactic community
num_envoys_to_galcom < 2
Supported Scopes: country

has_envoy_task - Checks the scoped envoy's task.
has_envoy_task = {
	task = improve_relations/harm_relations/federation/galactic_community/spy_network/first_contact/strengthen_imperial_authority/undermine_imperial_authority/none
	target = <country> (optional)
}
Supported Scopes: leader

has_envoy_cooldown - Checks the scoped envoy currently has a cooldown on its status.
has_envoy_cooldown = yes/no
Supported Scopes: leader

trade_income - Checks the country's energy credits income from trade for the previous month
trade_income < 30
Supported Scopes: country

has_anomaly - Checks if the planet has an anomaly
has_anomaly = yes
Supported Scopes: planet

stored_physics_points - Checks the country's amount of stored physics research
stored_physics_points
Supported Scopes: country

stored_society_points - Checks the country's amount of stored society research
stored_society_points
Supported Scopes: country

stored_engineering_points - Checks the country's amount of stored engineering research
stored_engineering_points
Supported Scopes: country

balance - Checks the country's energy credit balance
balance < 39
Supported Scopes: country

running_balance - Checks the country's running energy credit balance
running_balance > 61
Supported Scopes: country

is_planet - Checks if the planet is the same as target planet
is_planet = <target>
Supported Scopes: planet

is_pop - Checks if the pop is the same as target pop
is_pop = <target>
Supported Scopes: pop

is_ship - Checks if the ship is the same as target ship
is_ship = <target>
Supported Scopes: ship

is_army - Checks if the army is the same as target army
is_army = <target>
Supported Scopes: army

is_country - Checks if the country is the same as target country
is_country = <target>
Supported Scopes: country

is_tutorial_level - Checks the country's tutorial level (0 off, 1 limited, 2 full)
is_tutorial_level = 0
Supported Scopes: country

is_multiplayer - Checks if the game is running in multiplayer
is_multiplayer = yes
Supported Scopes: all

has_event_chain - Checks if the country has a specific event chain
has_event_chain = old_gods_chain
Supported Scopes: country

is_species_class - Checks if the pop/country's founder species is a specific species class
is_species_class = MAM
Supported Scopes: country pop species dlc_recommendation

has_opinion_modifier - Checks if the country has a specific opinion modifier towards target country or anyone
has_opinion_modifier = { who = <target (optional)> modifier = encroaching_colony is_reverse = no }
Supported Scopes: country

has_established_contact - Checks if the country has established contact with target country
has_established_contact = <target>
Supported Scopes: country

has_completed_event_chain_counter - Checks if the country has completed a specific counter in an event chain
has_completed_event_chain_counter = { event_chain = amoebas_2_chain counter = amoebas_slaughtered }
Supported Scopes: country

has_planet_class - Checks if the system has planet of specific class
has_planet_class = pc_tundra/<scope>
Supported Scopes: galactic_object

is_disabled - Checks if the ship/fleet is disabled
is_disabled = yes
Supported Scopes: ship fleet

has_existing_ship_design - Checks if the country has a specific ship design available

Supported Scopes: country

has_resource - Checks if the planet has a specific amount of a specific resource
has_resource = { type = minerals amount < 5 }
has_resource = no
Supported Scopes: planet country deposit

has_building_construction - Checks if the planet has any, or a specific, ongoing building construction
has_building_construction = yes
has_building_construction = building_capital_3
Supported Scopes: planet

num_fallen_empires_setting - Checks the number of fallen empires defined in setup
num_fallen_empires_setting > 1
Supported Scopes: all

any_deposit - Iterate through each deposit on the planet - checks whether the enclosed triggers return true for any of them
any_deposit = { <count=<num/all>> <triggers> }
Supported Scopes: planet

free_building_slots - Checks the planet's number of slots available for new constructions
free_building_slots > 2
Supported Scopes: planet

has_relation_flag - Checks if the country has a relation flag towards target country
has_relation_flag = { who = <target> flag = <flag> }
Supported Scopes: country

reverse_has_relation_flag - Checks if the target country has a relation flag towards the country
reverse_has_relation_flag = { who = <target> flag = <flag> }
Supported Scopes: country

has_moon - Checks if the planet has a moon
has_moon = yes
Supported Scopes: planet

num_moons - Checks the planet's number of moons
num_moons < 4
Supported Scopes: planet

is_sapient - Checks if the pop is sapient
is_sapient = no
Supported Scopes: pop species

is_preventing_anomaly - Checks if the planet is prevented from generating anomalies
is_preventing_anomaly = yes
Supported Scopes: planet

has_deposit_for - Checks if the planet has a deposit for a specific ship class
has_deposit_for = shipclass_mining_station
Supported Scopes: planet

colony_age - Checks the planet's (colony's) age in months
colony_age > 12
Supported Scopes: planet

is_bottleneck_system - Checks if the system is bottleneck within the range NDefines::NGameplay::SYSTEM_BOTTLENECK_RADIUSis_bottleneck_system = yes
Supported Scopes: galactic_object

is_rim_system - Checks if the system is on the galactic rim
is_rim_system = yes
Supported Scopes: galactic_object

any_rim_system - Iterate through all rim systems - checks whether the enclosed triggers return true for any of them
any_rim_system = { <count=<num/all>> <triggers> }
Supported Scopes: all

is_country_type - Checks if the country is a specific type
is_country_type = fallen_empire
Supported Scopes: country

has_modifier - Checks if the scope object has a certain modifier
has_modifier = <modifier>
Supported Scopes: megastructure planet country ship pop galactic_object pop_faction federation spy_network espionage_operation

any_ship_in_system - Iterate through each ship in the current system - checks whether the enclosed triggers return true for any of them
any_ship_in_system = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

mission_progress - Checks if the observation post has achieved specific progress in a mission
mission_progress > 0.7
Supported Scopes: fleet

num_ethics - Checks the country/pop's number of ethics
num_ethics = 3
Supported Scopes: country pop

num_traits - Checks the country/pop/leader/species' number of traits
num_traits < 3
Supported Scopes: country pop leader species

has_truce - Checks if the country has a truce with target country
has_truce = <target>
Supported Scopes: country

has_system_trade_value - Checks the system's trade value
has_system_trade_value > 200
Supported Scopes: galactic_object

can_access_system - Checks if the scoped fleet is able to enter the system. Note: Avoid overusing this, it is a performance-intensive trigger!
can_access_system = <solar system>
Supported Scopes: fleet

is_ringworld - Checks if the planet is a ringworld
is_ringworld = yes
Supported Scopes: planet

member_of_faction - Checks if the pop belongs to any, or a specific, faction
member_of_faction = no/<pop faction scope>/isolationist
Supported Scopes: pop

support - Checks the faction's support level
 support > 0.5
Supported Scopes: pop_faction

is_ideal_planet_class - Checks if the planet is of the ideal class for target country, species or pop
is_ideal_planet_class = { who = <target> status = yes/no }
Supported Scopes: planet

is_pop_faction_type - Checks the faction's type
is_pop_faction_type = isolationist
Supported Scopes: pop_faction

intel_level - Checks the country's intel level of target system
intel_level = { level > low system = <target> }
Supported Scopes: country

is_researching_area - Checks the scientist's field of research
is_researching_area = society
Supported Scopes: leader

any_owned_leader - Iterate through each leader that is owned by the country - checks whether the enclosed triggers return true for any of them
any_owned_leader = { <count=<num/all>> <triggers> }
Supported Scopes: country

any_owned_pop - Iterate through all owned pops - checks whether the enclosed triggers return true for any of them
any_owned_pop = { <count=<num/all>> <triggers> }
Supported Scopes: planet country pop_faction sector

has_faction - Checks if the country has any instance of target faction type
has_faction = isolationist
Supported Scopes: country

count_owned_pops - Count the number of owned pops in the country that fulfill the specified criteria. Warning: deprecated, use count_owned_pop
count_owned_pops = { limit = { <triggers> } count > 12 }
Supported Scopes: planet country pop_faction

can_declare_war - Checks if the country can declare war against target country
can_declare_war = {
	target = <target country>
	attacker_war_goal = <war goal>
}
Supported Scopes: country

is_hostile - Checks if the country is hostile towards target country
is_hostile = <target>
Supported Scopes: country

is_forced_neutral - Checks if the country has been set to be neutral towards target country via set_faction_hostility
is_forced_neutral = <target>
Supported Scopes: country

is_forced_friendly - Checks if the country has been set to be friendly towards target country via set_faction_hostility
is_forced_friendly = <target>
Supported Scopes: country

has_communications - Checks if the country has established communications with target country
has_communications = <target>
Supported Scopes: country

has_country_resource - Checks the country's amount of a specific stored resource
has_country_resource = { type = minerals amount > 99 }
Supported Scopes: country

has_leader_flag - Checks if the leader has a specific flag
has_leader_flag = <flag>
Supported Scopes: leader

num_killed_ships - Checks how many of target country's ships that the country has destroyed
num_killed_ships = { target = <target> value > 5 }
Supported Scopes: country

num_taken_planets - Checks how many planets the country has taken from target country
num_taken_planets = { target = <target> value > 1 }
Supported Scopes: country

leader_of_faction - Checks if the leader is the leader of a faction
leader_of_faction = yes/no/<pop faction scope>/isolationist
Supported Scopes: leader

is_scope_valid - Checks if the current scope is valid
is_scope_valid = yes
Supported Scopes: all

opposing_ethics_divergence - Checks how far removed the country/pop's ethos is from target's
opposing_ethics_divergence = { steps > 1 who = <target> }
Supported Scopes: country pop

is_war_leader - Checks if the country leads in a war
is_war_leader = yes
Supported Scopes: country pop_faction

is_in_federation_with - Checks if the country is in a federation with target country
is_in_federation_with = <target>
Supported Scopes: country

can_change_policy - Checks if the country can change a specific policy
can_change_policy = slavery
Supported Scopes: country

is_ironman - Check if current game is running in ironman mode
is_ironman = yes
Supported Scopes: all

has_monthly_income - Checks the country's monthly income of a specific resource
has_monthly_income = { resource = engineering_research  value < 20 }
Supported Scopes: country

else - Evaluates the triggers if the display_triggers of preceding 'if' or 'else_if' is not met
if = { limit = { <display_triggers> } <triggers> }
 else = { <triggers> }
Supported Scopes: all

has_policy_flag - Checks if the country has a specific policy
has_policy_flag = slavery_not_allowed
Supported Scopes: country

count_deposits - Checks the number of deposits on the planet that meet the specified criteria
count_deposits = { type = <deposit> count < 2 }
Supported Scopes: planet

has_tech_option - Checks if the country has a tech research option currently available
has_tech_option = tech_mining_network_2
Supported Scopes: country

count_tech_options - Checks the country's number available tech research options in a specific field
count_tech_options = { area = physics count > 0 }
Supported Scopes: country

has_point_of_interest - Checks if the scoped country has a specific point of interest in its situation log
has_point_of_interest = { poi = <id> }
Supported Scopes: planet country ship fleet galactic_object ambient_object

is_being_repaired - Checks if the ship/fleet is being repaired
is_being_repaired = yes
Supported Scopes: ship fleet

compare_distance - Checks whether the current scope is closer to a specified object than it is to a second specified object within the same solar system.
compare_distance = { closer_object = root further_object = from }
Supported Scopes: megastructure planet ship pop fleet galactic_object leader ambient_object starbase deposit archaeological_site first_contact

any_ambient_object - Iterate through every ambient object in the game - checks whether the enclosed triggers return true for any of them
any_ambient_object = { <count=<num/all>> <triggers> }
Supported Scopes: all

any_system_ambient_object - Iterate through every ambient object in the solar system - checks whether the enclosed triggers return true for any of them
any_system_ambient_object = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

has_ambient_object_flag - Checks if the ambient object has a specific flag
has_ambient_object_flag = <flag>
Supported Scopes: ambient_object

is_ambient_object_type - Checks if the ambient object is a specific type.
is_ambient_object_type = caravaneer_billboard_1
Supported Scopes: ambient_object

any_bordering_country - Iterate through all bordering countries of a system - checks whether the enclosed triggers return true for any of them
any_bordering_country = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

galaxy_percentage - Checks if the country has a specific percentage (0.00-1.00) of the galaxy within its borders
galaxy_percentage > 0.40
Supported Scopes: country

custom_tooltip_fail - Shows custom text only when the associated trigger fails
custom_tooltip_fail = {
	text = <text>
	<triggers>
}
Supported Scopes: all

count_armies - Checks the number of armies on/in the planet/country that meet the specified criteria
count_armies = { limit = { <triggers> } count < 12 }
Supported Scopes: planet country

is_in_combat - Checks if the ship/fleet is engaged in combat
is_in_combat = yes
Supported Scopes: ship fleet

any_member - Iterate through each member of the federation - checks whether the enclosed triggers return true for any of them
any_member = { <count=<num/all>> <triggers> }
Supported Scopes: federation

is_guaranteeing - Checks if the country is guaranteeing the independence of target country
is_guaranteeing = <target>
Supported Scopes: country

is_war_participant - Checks if target country is participating in the war on the specified side
is_war_participant = { who = <target>/war = <target> side = attackers/defenders/<target> }
Supported Scopes: country war

is_homeworld - Checks if the planet is its owner's homeworld
is_homeworld = yes
Supported Scopes: planet

is_friendly_to - Checks if the country has a friendly attitude towards target country
is_friendly_to = <target>
Supported Scopes: country

is_hostile_to - Checks if the country has a hostile attitude towards target country
is_hostile_to = <target>
Supported Scopes: country

is_protective_to - Checks if the country has a protective attitude towards target country
is_protective_to = <target>
Supported Scopes: country

is_threatened_to - Checks if the country has a threatened attitude towards target country
is_threatened_to = <target>
Supported Scopes: country

years_passed - Checks the number of in-game years passed since the 2200 start
years_passed < 150
Supported Scopes: all

mid_game_years_passed - Checks the number of in-game years passed since the mid-game start date
mid_game_years_passed >= 50
Supported Scopes: all

end_game_years_passed - Checks the number of in-game years passed since the end-game start date
end_game_years_passed >= 50
Supported Scopes: all

is_dismissive_to - Checks if the country has a dismissive attitude towards target country
is_dismissive_to = <target>
Supported Scopes: country

is_patronizing_to - Checks if the country has a patronizing attitude towards target country
is_patronizing_to = <target>
Supported Scopes: country

is_angry_to - Checks if the country has an angry attitude towards target country
is_angry_to = <target>
Supported Scopes: country

is_neighbor_of - Checks if the country/planet is neighbors with target country
is_neighbor_of = <target>
Supported Scopes: planet country ship fleet galactic_object

is_rival - Checks if the country has a rival attitude towards target country
is_rival = <target>
Supported Scopes: country

is_unfriendly_to - Checks if the country has an unfriendly attitude towards target country
is_unfriendly_to = <target>
Supported Scopes: country

is_loyal_to - Checks if the country has a loyal attitude towards target country
is_loyal_to = <target>
Supported Scopes: country

is_disloyal_to - Checks if the country has a disloyal attitude towards target country
is_disloyal_to = <target>
Supported Scopes: country

is_cordial_to - Checks if the country has a cordial attitude towards target country
is_cordial_to = <target>
Supported Scopes: country

is_domineering_to - Checks if the country has a domineering attitude towards target country
is_domineering_to = <target>
Supported Scopes: country

fleet_power - Checks the scope's total fleet power
fleet_power > 2500
Supported Scopes: country fleet federation

has_election_type - Checks if the country has a specific election type
has_election_type = oligarchic
Supported Scopes: country

has_ai_personality - Checks if an AI empire has a certain personality type
has_ai_personality = fanatic_befrienders
Supported Scopes: country

has_ai_personality_behaviour - Checks if a country has a certain AI personality behavior
has_ai_personality_behaviour = slaver
Supported Scopes: country

has_valid_ai_personality - Checks if the country has a valid AI personality
has_valid_ai_personality = yes
Supported Scopes: country

has_migration_access - Checks if the country has migration access to target country
has_migration_access = <target>
Supported Scopes: country

logged_in_to_pdx_account - Checks if the local human is logged in to a Pdx account. This WILL cause an out of sync if used for anything that can change the game state
Supported Scopes: all

would_join_war - Checks if the country would join the side of target country in a hypothetical war
would_join_war = { attacker = <target> defender = <target> side = <target> }
Supported Scopes: country

can_be_subject - Checks if the country can be a subject of a specific type under target country
can_be_subject = { subject_type = tributary overlord = <target> }
Supported Scopes: country

count_war_participants - Checks the number of participants in the war on a specific side that meet the specified criteria
count_war_participants = { limit = { <triggers> } side = target count < 4
Supported Scopes: war

count_potential_war_participants - Checks the amount of potential war participants in a specific war that meet the specified criteria
count_potential_war_participants = { attacker = <target> defender = <target> side = <target> limit = { <triggers> } count > 2
Supported Scopes: all

has_skill - Checks if the leader has a specific experience level
has_skill > 2
Supported Scopes: leader

has_experience - Checks if the leader has a specific amount of experience
has_experience < 900
Supported Scopes: leader

any_neighbor_system - Iterate through all a system's neigboring systems by hyperlane - checks whether the enclosed triggers return true for any of them
any_neighbor_system = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

is_under_colonization - Checks if the planet is being colonized
is_under_colonization = yes
Supported Scopes: planet

has_colony_progress - Checks the planet's progress towards completing colonization
has_colony_progress > 20
Supported Scopes: planet

distance_to_empire - Checks the ship/fleet/planet/system's galaxy map distance to target empire
distance = { who = <target> distance = x }
Supported Scopes: planet ship fleet galactic_object

is_unemployed - Checks if the pop is unemployed
is_unemployed = yes
Supported Scopes: pop

years_of_peace - Checks the number of in-game years country has been at peace, with optional parameter to delay from start of game
years_of_peace = { value > 10 delay = 0 }
Supported Scopes: country

is_within_borders_of - Checks if the planet/system/fleet/ship is within the borders of the target country
is_within_borders_of = <target>
Supported Scopes: planet ship fleet galactic_object

num_marauder_empires_to_spawn - Checks the number of marauder empires specified by the galaxy setup
num_marauder_empires_to_spawn > 1
Supported Scopes: all

has_species_flag - Checks if the species has a specific flag
has_species_flag = <flag>
Supported Scopes: species

has_auto_move_target - Checks if the fleet/ship has an active auto-move target set
has_auto_move_target = yes
Supported Scopes: ship fleet

count_starbase_modules - Checks the number of starbase modules that are of the specified type or not
count_starbase_modules = { type = anchorage count < 12 }
Supported Scopes: starbase

is_belligerent_to - Checks if the country has a belligerent attitude towards target country
is_belligerent_to = <target>
Supported Scopes: country

is_imperious_to - Checks if the country has a imperious attitude towards target country
is_imperious_to = <target>
Supported Scopes: country

is_arrogant_to - Checks if the country has a arrogant attitude towards target country
is_arrogant_to = <target>
Supported Scopes: country

has_association_status - Check if the country has federation association status with target country
has_association_status = <target>
Supported Scopes: country

is_original_owner - Checks if the target country is the planet's original owner
is_original_owner = <target>
Supported Scopes: planet

can_work_job - Checks if the pop can work a job
can_work_job = yes
Supported Scopes: pop

subject_can_diplomacy - Checks if the current country is allowed by its overlord to take diplomatic action
subject_can_diplomacy = <target>
Supported Scopes: country

has_surveyed_class - Checks if the country has surveyed any planet of a specific class
has_surveyed_class = pc_tundra
Supported Scopes: country

fleet_size - Checks the fleet's fleet size
fleet_size < 125
Supported Scopes: fleet

host_has_dlc - Checks if the host has a specific DLC enabled
Supported Scopes: all

local_has_dlc - Checks if the local player has a specific DLC enabled
Supported Scopes: all

num_rare_techs - Checks the country's number of researched rare technologies
num_rare_techs < 4
Supported Scopes: country

num_repeatable_techs - Checks the country's number of researched repeatable technologies
num_repeatable_techs < 4
Supported Scopes: country

has_mandate - Checks if the leader has any, or a specific, mandate
has_mandate = no
has_mandate = mandate_shipwright
Supported Scopes: leader

nor - An inverted OR trigger
Supported Scopes: all

nand - An inverted AND trigger
Supported Scopes: all

num_energy - Checks the planet's total amount of energy
num_energy > 19
Supported Scopes: planet

num_armies - Checks the country's number of armies
num_armies < 20
Supported Scopes: country

has_war_goal - Checks if a war goal is set.
has_war_goal = yes
Supported Scopes: all

max_naval_capacity - Checks the country's max naval capacity in absolute numbers
max_naval_capacity > 120
Supported Scopes: country

used_naval_capacity_integer - Checks the country's used naval capacity in absolute numbers
used_naval_capacity_integer < 89
Supported Scopes: country

used_naval_capacity_percent - Checks the country's used naval capacity in relative terms (0.00-1.00)
used_naval_capacity_percent < 0.75
Supported Scopes: country

war_begun_num_fleets_gone_mia - Checks amount of target country's fleets that went MIA when the war began
war_begun_num_fleets_gone_mia = { who = <target> value < 10 }
Supported Scopes: war

custom_tooltip_success - Shows custom text only when the associated trigger passes
custom_tooltip_success = {
	text = <text>
	<triggers>
}
Supported Scopes: all

has_active_event - Checks if country has active events:
has_active_event = {
	event.1
	event.2
	event.n
}
Supported Scopes: country

success_text - For 'desc={trigger={' use. Shows custom text when the associated trigger passes.
success_text = {
	text = <text>
	<triggers>
}
Supported Scopes: all

fail_text - For 'desc={trigger={' use. Shows custom text when the associated trigger fails.
fail_text = {
	text = <text>
	<triggers>
}
Supported Scopes: all

is_subject_type - Checks if the country is a specific type of subject
is_subject_type = vassal
Supported Scopes: country

has_defensive_pact - Checks if the country has a defensive pact with target country
has_defensive_pact = <target>
Supported Scopes: country

calc_true_if - Returns true if the specified number of sub-triggers return true
calc_true_if = { amount = 2 <trigger> <trigger> <trigger> }
Supported Scopes: all

is_researching_technology - Checks if the country is currently researching a specific technology
is_researching_technology = tech_gene_seed_purification
Supported Scopes: country

is_subject - Checks if the country is a subject of any other country
is_subject = no
Supported Scopes: country

any_subject - Iterate through all subjects of the scoped country - checks whether the enclosed triggers return true for any of them
any_subject = { <count=<num/all>> <triggers> }
Supported Scopes: country

log - Prints a message to game.log for debugging purposes
log = <string>
Supported Scopes: all

is_enigmatic_to - Checks if the country has a enigmatic attitude towards target country
is_enigmatic_to = <target>
Supported Scopes: country

is_berserker_to - Checks if the country has a berserker attitude towards target country
is_berserker_to = <target>
Supported Scopes: country

has_same_ethos - Checks if a country has the same ethos (complete set of ethics) as a country or pop
has_same_ethos = <target>
Supported Scopes: country pop

is_majority_species - Checks if the specified species is the majority species on the current planet.
is_majority_species = <species>
Supported Scopes: planet

has_closed_borders - Check if the country has closed its borders to target country
has_closed_borders = <target>
Supported Scopes: country

is_difficulty - Checks the game's difficulty level (0 to 5, with 0 as Cadet and 5 as Grand Admiral
is_difficulty = 2
Supported Scopes: all

is_exact_same_species - Checks if the scoped object is originally of the same species, or currently of the exact same species instance, as another object
is_exact_same_species = <target>
Supported Scopes: country ship pop leader army species

can_control_access_for - Checks if the country is allowed to control target country's border access to the country
can_control_access_for = <target>
Supported Scopes: country

is_overlord_to - Checks if the country has an overlord attitude towards target country
is_overlord_to = <target>
Supported Scopes: country

is_improving_relations_with - Checks if the country has an envoy sent to the target country to improve relations
is_improving_relations_with = <target>
Supported Scopes: country

is_harming_relations_with - Checks if the country has an envoy sent to the target country to harm relations
is_harming_relations_with = <target>
Supported Scopes: country

distance_to_core_percent - Checks the ship/fleet/planet/leader/pop/system's distance to the galactic core in percent, where center = 0 and galactic rim = 100
distance_to_core_percent < 60
Supported Scopes: all

has_non_aggression_pact - Check if the country has a non-aggression pact with target country
has_non_aggression_pact = <target>
Supported Scopes: country

happiness_planet - Checks the average happiness on the planet
happiness_planet < 60
Supported Scopes: planet

pre_ruler_leader_class - Checks the rulers previous leader class
pre_ruler_leader_class = scientist
Supported Scopes: leader

has_hp_percentage - Checks a fleet or ship's hit points percentage
has_hp_percentage > 0.5
Supported Scopes: ship fleet

can_join_factions - Checks if scoped pop can join a faction
Supported Scopes: pop

is_custodial_to - Checks if the country has a custodial attitude towards target country
is_custodial_to = <target>
Supported Scopes: country

has_valid_civic - Checks if the current country has a certain civic and if its validated
has_valid_civic = my_test_civic_1
Supported Scopes: country

has_non_swapped_tradition - Checks if a country has the given tradition and it is not swapped. Also returns true if the tradition is swapped but has inherit_effects = yes (i.e. it's a cosmetic flavor swap).
has_non_swapped_tradition = tr_my_santa_claus_tradition
Supported Scopes: country

has_swapped_tradition - Checks if a country has the given swapped tradition.
has_swapped_tradition = tr_my_santa_claus_tradition
Supported Scopes: country

is_event_leader - Checks if a leader is a special event leader (defined in create_leader)
is_event_leader = no
Supported Scopes: leader

is_crises_allowed - Check if current game allows crises
is_crises_allowed = yes
Supported Scopes: all

allowed_crisis_type - Checks which crisis is allowed to spawn in the current game
allowed_crisis_type = prethoryn/unbidden/contingency/all
Supported Scopes: all

is_custom_capital_location - Checks if the spatial object is its owner's custom capital location
is_custom_capital_location = yes
Supported Scopes: planet ship fleet galactic_object

resource_stockpile_compare - Checks specific resource stockpile for the country scope:
resource_stockpile_compare = {
	resource = <resource_name>
	value ><= <value>
	mult = <variable> (optional: multiply the value by a variable, e.g. for when you are doing the same with add_resource)
}
Supported Scopes: country

planet_resource_compare - Checks specific resource value for scoped planet:
planet_resource_compare = {
	resource = <resource_name>
	value ><= <value>
	type = upkeep/produces/balance(default)}

Supported Scopes: planet

resource_income_compare - Checks specific resource income value for the country scope:
resource_income_compare = {
	resource = <resource_name>
	value ><= <value>
}

Supported Scopes: country

market_resource_price - Checks market price of a specific resource for the current country:
market_resource_price = {
	resource = <resource_name>
	amount = <value> (how much are you buying/selling)
	trade_type = market_buy/market_sell/not_set (i.e. price without market fees)
	value ><= <value>
}

Supported Scopes: country

pop_percentage - Checks the percentage of pops in the scope that fulfill the specified criteria
pop_percentage = {
	percentage > 0.74
	limit = { <triggers> }
	exclude = { <triggers> } (optional: specifies pops to exclude from the calculation)
}
Supported Scopes: planet country pop_faction sector

num_species - Checks if the number of species on a planet, in an empire or in a pop faction is according to the argument. Does not count genetically modified species as unique.
num_species > 8
Supported Scopes: planet country pop_faction

num_unique_species - Checks if the number of species on a planet, in an empire or in a pop faction is according to the argument. Counts genetically modified species as unique.
num_unique_species < 12
Supported Scopes: planet country pop_faction

has_diplo_migration_treaty - Checks if two countries have a migration treaty.
Supported Scopes: country

has_presence - Checks if a system contains any fleets, stations, mega structures or colonized planets.
has_presence = yes
Supported Scopes: galactic_object

is_megastructure_type - is_megastructure_type = <name of type>. Compares the type of scope's mega structure to a type from the database
Supported Scopes: megastructure

is_upgrading - is_upgrading = <yes/no>. Checks if the scope's fleet or mega structure is currently upgrading
Supported Scopes: megastructure fleet

relative_power - Compares relative power between two countries. relative_power = { who = <target country> category = <fleet/economy/technology/all> value ><= <pathetic/inferior/equivalent/superior/overwhelming>
Supported Scopes: country federation

has_tradition - Checks if a country has the given tradition.
has_tradition = tr_my_santa_claus_tradition
Supported Scopes: country

any_relation - Iterate through all relations - checks whether the enclosed triggers return true for any of them
any_relation = { <count=<num/all>> <triggers> }
Supported Scopes: country

has_megastructure_flag - Checks if the mega structure has a specific flag
has_megastructure_flag = <flag>
Supported Scopes: megastructure

has_citizenship_type - Checks if a species/pop/leader has a particular citizenship type in their country
has_citizenship_type = { country = <who> type = <type> }
Supported Scopes: pop leader species

has_population_control - Checks if the pop is prevented from reproducing
has_population_control = yes
Supported Scopes: pop

has_migration_control - Checks if the pop is prevented from migrating
has_migration_control = yes
Supported Scopes: pop

species_planet_slave_percentage - Checks if a pop's planet has a specific percentage (0.00-1.00) of the same species enslaved
species_planet_slave_percentage > 0.40
Supported Scopes: pop

has_ascension_perk - Checks if a country has the given ascension perk.
has_ascension_perk = ap_my_ascension_perk
Supported Scopes: country

num_ascension_perks - Compares the number of AP points the country has spent with the given value
num_ascension_perks > 7
Supported Scopes: country

pop_produces_resource - Checks if a pop is currently producing a particular resource
pop_produces_resource = { type = minerals amount < 5 }
Supported Scopes: pop

has_military_service_type - Checks if a species/pop/leader has a particular military service type in their country
has_military_service_type = { country = <who> type = <type> }
Supported Scopes: pop leader species

has_purge_type - Checks if a species/pop/leader has a particular purge type in their country
has_purge_type = { country = <who> type = <type> }
Supported Scopes: pop leader species

has_slavery_type - Checks if a species/pop/leader has a particular slavery type in their country
has_slavery_type = { country = <who> type = <type> }
Supported Scopes: pop leader species

has_living_standard - Checks if a species/pop/leader has a particular living standard in their country
has_living_standard = { country = <who> type = <type> }
Supported Scopes: pop leader species

num_ascension_perk_slots - Compares the number of unlocked ascension perk slots of the scope with the given value
num_ascension_perks > 7
Supported Scopes: country

is_fleet_idle - Checks if the ship/fleet is idfle
is_fleet_idle = yes
Supported Scopes: ship fleet

debug_break - Trigger an assertion to stop the debugger when encountering this trigger; returns the value it is assigned
debug_break = yes
Supported Scopes: all

has_civic - Checks if the current country has the specified civic
has_civic = my_test_civic_1
Supported Scopes: country dlc_recommendation

has_authority - Checks if the current country has the specified government authority
has_authority = democratic
Supported Scopes: country dlc_recommendation

has_invalid_civic - Checks if the current country has a certain civic and if its invalidated
has_invalid_civic = my_test_civic_1
Supported Scopes: country

has_colonization_control - Checks if the pop is prevented from migrating
has_colonization_control = { value = bool country = scope }
Supported Scopes: pop species

has_trade_route - Checks if a system has trade route going through.
has_trade_route = <yes/no>
Supported Scopes: galactic_object

trade_route_value - Checks the trade value going through the system.
trade_route_value >=< 40
Supported Scopes: galactic_object

trade_intercepted_percentage - Checks the intercepted trade value ratio going through the system.
trade_intercepted_percentage >=< 40
Supported Scopes: galactic_object

trade_intercepted_value - Checks the intercepted trade value going through the system.
trade_intercepted_value >=< 40
Supported Scopes: galactic_object

trade_protected_value - Checks the protected trade value going through the system.
trade_protected_value >=< 40
Supported Scopes: galactic_object

trade_protected_percentage - Checks the protected trade value ratio going through the system.
trade_protected_percentage >=< 40
Supported Scopes: galactic_object

num_trade_routes - Counts the number trade routes in the empire.
num_trade_routes >=< 40
Supported Scopes: country

count_species - Counts the number of species in the scope that fulfill the specified criteria, not counting sub-species as unique.
count_species = { count > 4 limit = { <triggers> } }
Supported Scopes: planet country

count_exact_species - Counts the number of species in the scope that fulfill the specified criteria, counting sub-species as unique.
count_exact_species = { count > 4 limit = { <triggers> } }
Supported Scopes: planet country

is_constructing - Checks if the scoped construction ship is building the specified thing
is_constructing = megastructure | <megastructure type> | starbase | mining_station | research_station | observation_post | <ship class>
Supported Scopes: ship fleet

has_ruler_trait - Checks if a leader has a certain ruler trait, even if they are not currently ruler
has_ruler_trait = leader_trait_carefree
Supported Scopes: leader

num_trait_points - Checks the country/pop/leader/species' number of traits points spent
num_traits < 3
Supported Scopes: country pop leader species

has_component - Checks if a ship has a certain component
has_component = <component template key>
Supported Scopes: ship

has_notification_modifier - Checks if a country has a certain notification modifier
has_notification_modifier = <key>
Supported Scopes: country

pop_maintenance_cost - Checks the maintenace costs of a pop 
pop_maintenance_cost = { value > 0.5 resource = energy }
Supported Scopes: pop

conditional_tooltip - The enclosed trigger will be completely ignored if the condition in "trigger" isn't true. Useful to hide part of tooltips that are not relevant.
Supported Scopes: all

has_natural_wormhole - Returns true if the scopes system contains at least one natural wormhole
has_natural_wormhole = yes
Supported Scopes: galactic_object

has_claim - Checks if the country has claims on the given country or system.
has_claim = <country|system>
Supported Scopes: country

num_active_gateways - Checks the number of active gateways in the galaxy
num_active_gateways < 3
Supported Scopes: all

attacker_war_exhaustion - Checks the war exhaustion of the war's attackers
attacker_war_exhaustion > 0.6
Supported Scopes: war

defender_war_exhaustion - Checks the war exhaustion of the war's defenders
defender_war_exhaustion < 0.2
Supported Scopes: war

off_war_exhaustion_sum - Checks the country's total war exhaustion for all offensive wars
off_war_exhaustion_sum < 0.1
Supported Scopes: country

def_war_exhaustion_sum - Checks the country's total war exhaustion for all defemsove wars
def_war_exhaustion_sum > 0.75
Supported Scopes: country

has_starbase_module - Checks if the starbase has a specific module
has_starbase_module = <starbase module>
Supported Scopes: starbase

has_starbase_building - Checks if the starbase has a specific building
has_starbase_building = <starbase building>
Supported Scopes: starbase

has_starbase_size - Compares the starbase ship size
has_starbase_size >= <starbase ship size>
Supported Scopes: starbase

has_seen_any_bypass - Checks the scoped country has ever encountered a bypass of a given type before
has_seen_any_bypass = bypass_type
Supported Scopes: country

has_seen_specific_bypass - Checks the scoped country has encountered a specific bypass before
has_seen_specific_bypass = ROOT
Supported Scopes: country

owns_any_bypass - Checks if the scoped country controls any system containing a bypass of a specific type
owns_any_bypass = bypass_type
Supported Scopes: country

has_casus_belli - Checks if the country has a valid casus belli (any casus belli or a specific one) on the given country.
 has_casus_belli = { 
	target = <country> 
	type = <cb_type> #optional
 }
Supported Scopes: country

num_starbases - Counts the number of starbases owned by the scoped country
num_starbases >= 1
Supported Scopes: country

num_owned_active_gateways - Checks the number of active gateways owned by the scoped country
num_owned_active_gateways < 3
Supported Scopes: country

using_war_goal - Checks if a war has a specific war goal
using_war_goal = { type = <war goal> owner = <eventtarget, country> }
Supported Scopes: war

is_total_war - Checks if a war is a total war
is_total_war = yes/no
Supported Scopes: war

has_status - Checks the current status of the scoped ship or fleet.
has_status = <colossus status> #charging/firing
Supported Scopes: ship fleet

valid_planet_killer_target - Checks if the scoped fleet can target the given planet with its planet killer weapon
valid_planet_killer_target = <planet>
Supported Scopes: fleet

has_orbital_bombardment - Checks whether a planet is under bombardment
has_orbital_bombardment = yes
Supported Scopes: planet

has_orbital_bombardment_stance - Checks to what degree the planet is being bombarded
has_orbital_bombardment_stance = selective
Supported Scopes: planet

count_starbase_sizes - Checks if the scoped country has a specified quantity of a starbase size
count_starbase_sizes = {
starbase_size = <starbase_ship_size> 
count >= 2}
Supported Scopes: country

command_limit - Checks the country's command limit
command_limit > 120
Supported Scopes: country

has_hyperlane_to - Checks if the system has a hyperlane connection to target system
has_hyperlane_to = <target>
Supported Scopes: galactic_object

is_bridge - Checks if a system has the bridge flag or not.
is_bridge = <yes/no>
Supported Scopes: galactic_object

inverted_switch - Switch case for a trigger treated as NOT.
inverted_switch = {
	trigger = pop_has_ethic
	ethic_xenophile = { <trigger> }
	ethic_xenophobe = { <trigger> }
	default = { <trigger> }
}
Supported Scopes: all

is_scope_set - Checks if the scope is set for appropriate target
is_scope_set = <target>
Supported Scopes: planet country ship pop fleet

is_primary_star - Checks if the planet is the system's primary star
is_primary_star = yes
Supported Scopes: planet

uses_district_set - Checks if the planet has the specified tag for district usage:
uses_district_set = standard
Supported Scopes: planet

last_changed_species_rights_type - Check if the last species rights type changed for the pop or leader is of type type 
last_changed_species_rights_type = <living_standard/citizenship/military_service/slavery/purge/colonization_control/population_control/migration_control/none>
Supported Scopes: pop leader

controlled_systems - Checks the country's or sector's number of owned systems
controlled_systems < 3
Supported Scopes: country sector

exploitable_planets - Checks the country has planets that are unexploited
exploitable_planets < 3
Supported Scopes: country

controlled_colonizable - Checks the country controls planets that are colonizable
controlled_colonizable > 0
Supported Scopes: country

ai_colonize_plans - Checks how many plans the AI have for colonization (lighter than controlled_colonizable for AI)
ai_colonize_plans > 0
Supported Scopes: country

scientist_count - Checks the countrys' number of scientists
scientist_count < 4
Supported Scopes: country

has_ai_expansion_plan - Checks if the country AI has any plans to expand
has_ai_expansion_plan = no
Supported Scopes: country

is_on_market - Checks if resource is enabled on the Galactic Market
is_on_market = <resource_name>
Supported Scopes: all

can_buy_on_market - Checks if the current country can buy the specified resource on the market or galactic market
can_buy_on_market = <resource_name>
Supported Scopes: country

highest_threat - Checks the countrys' highest threat against it
highest_threat > 100
Supported Scopes: country

has_rival - Checks if the target country is the country's rival
has_rival = <target>
Supported Scopes: country

has_overlord - Checks if the target country is the country's overlord
has_overlord = <target>
Supported Scopes: country

has_sector_type - Checks if the sector has a specific type
has_sector_type = <sector type>
Supported Scopes: sector

num_sectors - Counts the number of sectors owned by the scoped country
num_sectors >= 1
Supported Scopes: country

has_deposit_category - Checks if a deposit has specified category
has_deposit_category = <category key>
Supported Scopes: deposit

has_relic - Checks if the scoped country has the specified relic
has_relic = <relic_key>
Supported Scopes: country

caravaneers_enabled - Checks if Caravaneers are enabled in game setup
Supported Scopes: all

xeno_compatibility_enabled - Checks if Xeno Compatibility are enabled in game setup
Supported Scopes: all

num_housing - Checks the planet's total housing
num_housing > 5
Supported Scopes: planet

is_sector_capital - Checks if the planet is its sector's capital
is_sector_capital = yes
Supported Scopes: planet

has_sector_focus - Checks if the sector has a certain focus
has_sector_focus = basic
Supported Scopes: sector

is_site_last_die_result - Compares the last dice roll.
is_site_last_die_result >= <int>
Supported Scopes: archaeological_site first_contact

is_current_stage_difficulty - Compares the current stage difficulty.
is_current_stage_difficulty >= <int>
Supported Scopes: archaeological_site first_contact

is_site_at_stage - Compares the current stage index.
is_site_at_stage >= <int>
Supported Scopes: archaeological_site

is_current_stage_clues - Compares the current stage clues.
is_current_stage_clues >= <int>
Supported Scopes: archaeological_site first_contact

is_site_days_to_next_die_roll - Compares days to next die roll.
is_site_days_to_next_die_roll >= <int>
Supported Scopes: archaeological_site first_contact

is_site_last_excavator - Checks last excavating country.
is_site_last_excavator = <country>
Supported Scopes: archaeological_site

is_site_type - Checks the type of the site.
is_site_type = <archaeological site type key>
Supported Scopes: archaeological_site

is_site_completed - Checks if the site has been completed.
is_site_completed = yes/no
Supported Scopes: archaeological_site first_contact

is_site_under_excavation - Checks if the site is currently being excavated.
is_site_under_excavation_ = yes/no
Supported Scopes: archaeological_site

is_site_current_stage_score - Compares the current stage discovery score.
is_site_current_stage_score >= <int>
Supported Scopes: archaeological_site first_contact

is_site_current_stage_score_no_die - Compares the current stage discovery score excluding the current die roll.
is_site_current_stage_score_no_die >= <int>
Supported Scopes: archaeological_site first_contact

is_current_excavator_fleet - Checks current excavator fleet.
is_current_excavator_fleet = <fleet>
Supported Scopes: archaeological_site

is_artificial - Checks if the planet is artificial (as set in planet_classes)
is_artificial = yes
Supported Scopes: planet

federation_experience - Checks experience of the federation.
federation_experience >=< 40 );
Supported Scopes: federation

federation_cohesion - Checks cohesion of the federation.
federation_cohesion >=< 40 );
Supported Scopes: federation

federation_cohesion_growth - Checks cohesion growth of the federation.
federation_cohesion_growth >=< 40 );
Supported Scopes: federation

has_any_federation_law_in_category - Checks if given law category has any active law
has_any_federation_law_in_category = <federation law category>
Supported Scopes: federation

has_federation_law - Checks if given law has been enacted in scoped federation
has_federation_law = <federation law>
Supported Scopes: federation

has_federation_perk - Checks if given perk has been unlocked in scoped federation
has_federation_perk = <federation perk>
Supported Scopes: federation

has_federation_type - Checks if federation has specific federation type
has_federation_type = <federation trype>
Supported Scopes: federation

federation_level - Checks federation level in comparison to given value in scoped federation
federation_level >=< <federation level>
Supported Scopes: federation

is_voting_on_resolution - Checks if the Galactic Community is currently voting on any, or a specific, resolution
is_voting_on_resolution = <resolution/any>
Supported Scopes: all

is_proposing_resolution - Checks if the scoped country is currently proposing any, or a specific, resolution
is_proposing_resolution = <resolution/any>
Supported Scopes: country

is_years_since_community_formation - Compare with number of years since the formation of the Galactic Community. NOTE: A negative value means it hasn't been formed yet!
is_years_since_community_formationn >= <int32>
Supported Scopes: all

is_years_since_council_establishment - Compares with number of years since the establishment of the Galactic Council. NOTE: A negative value means it hasn't been established yet!
is_years_since_council_establishment >= <int32>
Supported Scopes: all

is_galactic_community_formed - Checks if the Galactic Community has been formed
is_galactic_community_formed = yes/no
Supported Scopes: all

is_galactic_council_established - Checks if the Galactic Council has been established
is_galactic_council_established = yes/no
Supported Scopes: all

is_galactic_community_member - Checks if scoped country is part of the Galactic Community
is_galactic_community_member = yes/no
Supported Scopes: country

is_part_of_galactic_council - Checks if scoped country is part of the Galactic Council
is_part_of_galactic_council = yes/no
Supported Scopes: country

num_members - Checks number of members in scoped federation
num_members >=< <integer value>
Supported Scopes: federation

num_associates - Checks number of associates in scoped federation
num_associates >=< <integer value>
Supported Scopes: federation

has_origin - Checks if scoped country has specified origin
has_origin = <origin key>
Supported Scopes: country dlc_recommendation

is_last_lost_relic - Checks whether the relic passed in parameter is the last relic lost by the country int the current scope.
is_last_lost_relic = <relic_key>
Supported Scopes: country

is_last_received_relic - Checks whether the relic passed in parameter is the last relic received by the country int the current scope.
is_last_received_relic = <relic_key>
Supported Scopes: country

is_active_resolution - Checks if the provided Resolution is active in the Community
is_active_resolution = <resolution_type_key>
Supported Scopes: all

is_in_breach_of_any - Checks if an empire is in breach of any galactic resolution
is_in_breach_of_any = yes/no
Supported Scopes: country

in_breach_of - Checks if the scoped country is in breach of the specified resolution (or would be, were it to be enacted)
in_breach_of = <resolution>
Supported Scopes: country

num_council_positions - Compares the number of council positions in the Galactic Community.
num_council_positions >= <int32>
Supported Scopes: all

galactic_community_rank - Compares empire rank ( sorted by diplomatic weight ) in the Galactic Community. NOTE: If the scoped country isn't part of the community this returns -1.
galactic_community_rank >= <int32>
Supported Scopes: country

is_permanent_councillor - Checks if an empire has a permanent seat on the Galactic Council
is_permanent_councillor = yes/no
Supported Scopes: country

has_federation_setting - Checks if given setting is on for scoped federation
has_federation_setting = <setting>
Supported Scopes: federation

any_owned_species - Check if any of the species <on the planet/in the country> meet the specified criteria - checks whether the enclosed triggers return true for any of them
any_owned_species = { <count=<num/all>> <triggers> }
Supported Scopes: planet country

any_enslaved_species - Check if any of the species with enslaved pops <on the planet/in the country> meet the specified criteria - checks whether the enclosed triggers return true for any of them
any_enslaved_species = { <count=<num/all>> <triggers> }
Supported Scopes: planet country

num_ai_empires_setting - Checks the number of AI empires defined in setup
num_ai_empires_setting >= 1
Supported Scopes: all

num_defensive_pacts - Checks the number of defensive pacts the current country has.
num_defensive_pacts > 2
Supported Scopes: country

num_support_independence - Checks the number of empires the current country is supporting the independence of.
num_support_independence > 2
Supported Scopes: country

num_guarantees - Checks the number of empires the current country is guaranteeing.
num_guarantees > 2
Supported Scopes: country

num_non_aggression_pacts - Checks the number of non-aggression pacts the current country has.
num_non_aggression_pacts > 2
Supported Scopes: country

num_commercial_pacts - Checks the number of commercial pacts the current country has.
num_commercial_pacts > 2
Supported Scopes: country

num_research_agreements - Checks the number of research agreements a country has
num_research_agreements > 2
Supported Scopes: country

num_migration_pacts - Checks the number of migration pacts a country has
num_migration_pacts > 2
Supported Scopes: country

num_rivals - Checks the number of rivalries a country has
num_rivals > 2
Supported Scopes: country

num_closed_borders - Checks the number of countries the country has closed borders to
num_closed_borders > 2
Supported Scopes: country

num_truces - Checks the number of truces country has
num_truces > 2
Supported Scopes: country

galaxy_size - Checks whether the galaxy size if of a certain type
galaxy_size=medium
Supported Scopes: all

pop_has_happiness - Checks if the current pop has happiness or not.
pop_has_happiness = yes/no
Supported Scopes: pop

has_current_purge - Checks if any pops are being purged on the current planet.
has_current_purge = yes/no
Supported Scopes: planet

species_has_happiness_with_owner - Checks if the current species has happiness or not when owned by a specified country.
species_has_happiness_with_owner = country
Supported Scopes: species

num_planets_in_system - Checks the solar system's total number of planets
num_planets_in_system > 5
Supported Scopes: galactic_object

num_assigned_jobs - Checks the number of pops the planet or country has that work a specific job.
num_assigned_jobs = { job = <key>/unemployed value > 2 }
Supported Scopes: planet country

has_active_first_contact_with - Checks if the scoped country has an active First Contact site with the target country
has_active_first_contact_with = <country>
Supported Scopes: country

can_have_first_contact_site_with - Checks if the scoped country is allowed to have a First Contact site with the target country
can_have_first_contact_site_with = <country>
Supported Scopes: country

is_current_first_contact_stage - Checks if the scoped first contact is at the specified stage.
is_current_first_contact_stage = default_stage_2
Supported Scopes: first_contact

has_spynetwork - Checks if scoped country has any spynetworks with a value > 0
has_spynetwork = yes
Supported Scopes: country

has_espionage_asset - Checks if the scope hold an asset of specified type
has_espionage_asset = <asset type>
Supported Scopes: spy_network espionage_operation

has_espionage_operation_flag - Checks if the espionage operation has a specific flag
has_espionage_operation_flag = <flag>
Supported Scopes: espionage_operation

has_menace_perk - Checks if a country has a specific Menace Perk unlocked.
has_menace_perk = <menace_perk_name>
Supported Scopes: country

num_organic_pops_per_year - Checks how many organic pops the planet expects to gain in a year on average (through growth and assembly) at the current rate.
num_organic_pops_per_year > 0.41
Supported Scopes: planet

num_artificial_pops_per_year - Checks how many artificial pops the planet expects to assemble in a year on average at the current rate.
num_artificial_pops_per_year > 0.41
Supported Scopes: planet

has_spy_power - Compares the spy power of the network
has_spy_power = <num>
Supported Scopes: spy_network

has_available_spy_power - Compares the available spy power of the network
has_available_spy_power = <num>
Supported Scopes: spy_network

has_espionage_category - Checks if the scope is of a specific category
has_espionage_category = <espionage category key>
Supported Scopes: espionage_operation

is_running_espionage_operation - Checks if the scope is currently running an espionage operation
is_running_espionage_operation = <bool>
Supported Scopes: country spy_network

has_espionage_type - Checks if the scope is of a specific type
has_espionage_type = <espionage type key>
Supported Scopes: espionage_operation

relative_encryption_decryption - Divides the encryption value of the scope object with the decryption value of the target and compares with value.
Target is only used for country scope.

relative_encryption_decryption = {
	target = <country>
	value > 1.0
}
Supported Scopes: country spy_network espionage_operation

is_espionage_operation_days_to_next_die_roll - Compares days to next die roll.
is_espionage_operation_days_to_next_die_roll >= <value>
Supported Scopes: espionage_operation

is_espionage_operation_chapter - Compares the current espionage operation chapter index.
is_espionage_operation_chapter >= <int>
Supported Scopes: espionage_operation

is_espionage_operation_difficulty - Compares the espionage operation difficulty.
is_espionage_operation_difficulty >= <value>
Supported Scopes: espionage_operation

is_espionage_operation_score_no_die - Compares the current espionage score excluding the current die roll.
is_espionage_operation_score_no_die >= <value>
Supported Scopes: espionage_operation

is_espionage_operation_score - Compares the current espionage score.
is_espionage_operation_score >= <value>
Supported Scopes: espionage_operation

is_espionage_operation_last_die_result - Compares the last dice roll.
is_espionage_operation_last_die_result >= <int>
Supported Scopes: espionage_operation

num_espionage_assets - Compares the number of assets associated with the scope object.
num_espionage_assets = <int>
Supported Scopes: spy_network espionage_operation

has_ship_owner_type - Checks if the ship/fleet/design has a specific owner type (country/federation/galactic_community/global_ship_design)
has_ship_owner_type = galactic_community
Supported Scopes: ship fleet design

has_crisis_level - Checks if a country has a specific Crisis Level unlocked.
has_crisis_level = <crisis_level_name>
Supported Scopes: country

has_spynetwork_value - Compares spy network value of the scoped object
has_spynetwork_value >= <value>
Supported Scopes: spy_network

is_spynetwork_level - Compares spy network level of the scoped object
is_spynetwork_level >= <int>
Supported Scopes: spy_network

is_counter_espionage - Compares counter espionage of the scoped object
is_counter_espionage >= <value>
Supported Scopes: country

has_embassy - Check if the country has an embassy with the target country
has_embassy = <target>
Supported Scopes: country

is_spynetwork_max_level - Compares spy network max level of the scoped object
is_spynetwork_max_level >= <int>
Supported Scopes: spy_network

has_job_category - Checks if the pop is currently working this strata job (worker, specialist, complex_drone, etc.) Returns false if unemployed.
has_job_category = <key>
Supported Scopes: pop

count_ambient_object - Iterate through every ambient object in the game - checks whether the enclosed triggers return true for X/all of them
count_ambient_object = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_system_ambient_object - Iterate through every ambient object in the solar system - checks whether the enclosed triggers return true for X/all of them
count_system_ambient_object = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

any_owned_army - Iterate through each army that is owned by the country - checks whether the enclosed triggers return true for any of them
any_owned_army = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_owned_army - Iterate through each army that is owned by the country - checks whether the enclosed triggers return true for X/all of them
count_owned_army = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_planet_army - Iterate through each army on the planet (not in ground combat) belonging to the planet owner - checks whether the enclosed triggers return true for any of them
any_planet_army = { <count=<num/all>> <triggers> }
Supported Scopes: planet

count_planet_army - Iterate through each army on the planet (not in ground combat) belonging to the planet owner - checks whether the enclosed triggers return true for X/all of them
count_planet_army = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet

any_ground_combat_defender - Iterate through each army currently defending the planet in ground combat - checks whether the enclosed triggers return true for any of them
any_ground_combat_defender = { <count=<num/all>> <triggers> }
Supported Scopes: planet

count_ground_combat_defender - Iterate through each army currently defending the planet in ground combat - checks whether the enclosed triggers return true for X/all of them
count_ground_combat_defender = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet

any_ground_combat_attacker - Iterate through each army currently attacking the planet in ground combat - checks whether the enclosed triggers return true for any of them
any_ground_combat_attacker = { <count=<num/all>> <triggers> }
Supported Scopes: planet

count_ground_combat_attacker - Iterate through each army currently attacking the planet in ground combat - checks whether the enclosed triggers return true for X/all of them
count_ground_combat_attacker = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet

count_country - Iterate through all countries - checks whether the enclosed triggers return true for X/all of them
count_country = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_relation - Iterate through all relations - checks whether the enclosed triggers return true for X/all of them
count_relation = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_neighbor_country - Iterate through all neighbor countries - checks whether the enclosed triggers return true for any of them
any_neighbor_country = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_neighbor_country - Iterate through all neighbor countries - checks whether the enclosed triggers return true for X/all of them
count_neighbor_country = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

count_bordering_country - Iterate through all bordering countries of a system - checks whether the enclosed triggers return true for X/all of them
count_bordering_country = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

any_rival_country - Iterate through all countries rivalled by the scoped country - checks whether the enclosed triggers return true for any of them
any_rival_country = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_rival_country - Iterate through all countries rivalled by the scoped country - checks whether the enclosed triggers return true for X/all of them
count_rival_country = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_federation_ally - Iterate through all countries in a federation with the scoped country - checks whether the enclosed triggers return true for any of them
any_federation_ally = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_federation_ally - Iterate through all countries in a federation with the scoped country - checks whether the enclosed triggers return true for X/all of them
count_federation_ally = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

count_playable_country - Iterate through all playable countries - checks whether the enclosed triggers return true for X/all of them
count_playable_country = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_subject - Iterate through all subjects of the scoped country - checks whether the enclosed triggers return true for X/all of them
count_subject = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_spynetwork - Iterate through each spynetwork - checks whether the enclosed triggers return true for any of them
any_spynetwork = { <count=<num/all>> <triggers> }
Supported Scopes: country no_scope

count_spynetwork - Iterate through each spynetwork - checks whether the enclosed triggers return true for X/all of them
count_spynetwork = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country no_scope

any_espionage_operation - Iterate through each espionage operation - checks whether the enclosed triggers return true for any of them
any_espionage_operation = { <count=<num/all>> <triggers> }
Supported Scopes: country no_scope spy_network

count_espionage_operation - Iterate through each espionage operation - checks whether the enclosed triggers return true for X/all of them
count_espionage_operation = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country no_scope spy_network

any_espionage_asset - Iterate through each espionage asset - checks whether the enclosed triggers return true for any of them
any_espionage_asset = { <count=<num/all>> <triggers> }
Supported Scopes: no_scope spy_network espionage_operation

count_espionage_asset - Iterate through each espionage asset - checks whether the enclosed triggers return true for X/all of them
count_espionage_asset = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: no_scope spy_network espionage_operation

any_federation - Iterate through each federation - checks whether the enclosed triggers return true for any of them
any_federation = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_federation - Iterate through each federation - checks whether the enclosed triggers return true for X/all of them
count_federation = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

any_first_contact - Iterate through each first contact (both active and complete) that this country is engaging in - checks whether the enclosed triggers return true for any of them
any_first_contact = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_first_contact - Iterate through each first contact (both active and complete) that this country is engaging in - checks whether the enclosed triggers return true for X/all of them
count_first_contact = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_active_first_contact - Iterate through each active (non-completed) first contact that this country is engaging in - checks whether the enclosed triggers return true for any of them
any_active_first_contact = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_active_first_contact - Iterate through each active (non-completed) first contact that this country is engaging in - checks whether the enclosed triggers return true for X/all of them
count_active_first_contact = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_galaxy_fleet - Iterate through each fleet in the entire game - checks whether the enclosed triggers return true for any of them
any_galaxy_fleet = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_galaxy_fleet - Iterate through each fleet in the entire game - checks whether the enclosed triggers return true for X/all of them
count_galaxy_fleet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

any_combatant_fleet - Iterate through each fleet this fleet is in combat with - checks whether the enclosed triggers return true for any of them
any_combatant_fleet = { <count=<num/all>> <triggers> }
Supported Scopes: fleet

count_combatant_fleet - Iterate through each fleet this fleet is in combat with - checks whether the enclosed triggers return true for X/all of them
count_combatant_fleet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: fleet

any_fleet_in_system - Iterate through each fleet in the current system - checks whether the enclosed triggers return true for any of them
any_fleet_in_system = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

count_fleet_in_system - Iterate through each fleet in the current system - checks whether the enclosed triggers return true for X/all of them
count_fleet_in_system = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

count_owned_fleet - Iterate through each fleet owned by the country - checks whether the enclosed triggers return true for X/all of them
count_owned_fleet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

count_fleet_in_orbit - Iterate through each fleet orbiting the current planet/starbase/megastructure - checks whether the enclosed triggers return true for X/all of them
count_fleet_in_orbit = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: megastructure planet starbase

count_owned_leader - Iterate through each leader that is owned by the country - checks whether the enclosed triggers return true for X/all of them
count_owned_leader = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_pool_leader - Iterate through each leader that is recruitable for the country - checks whether the enclosed triggers return true for any of them
any_pool_leader = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_pool_leader - Iterate through each leader that is recruitable for the country - checks whether the enclosed triggers return true for X/all of them
count_pool_leader = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_envoy - Iterate through each envoy available to the country - checks whether the enclosed triggers return true for any of them
any_envoy = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_envoy - Iterate through each envoy available to the country - checks whether the enclosed triggers return true for X/all of them
count_envoy = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_megastructure - Iterate through each megastructure - checks whether the enclosed triggers return true for any of them
any_megastructure = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_megastructure - Iterate through each megastructure - checks whether the enclosed triggers return true for X/all of them
count_megastructure = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

any_owned_megastructure - Iterate through each owned megastructure - checks whether the enclosed triggers return true for any of them
any_owned_megastructure = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_owned_megastructure - Iterate through each owned megastructure - checks whether the enclosed triggers return true for X/all of them
count_owned_megastructure = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_system_megastructure - Iterate through each megastructure in system - checks whether the enclosed triggers return true for any of them
any_system_megastructure = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_system_megastructure - Iterate through each megastructure in system - checks whether the enclosed triggers return true for X/all of them
count_system_megastructure = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_member - Iterate through each member of the federation - checks whether the enclosed triggers return true for X/all of them
count_member = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: federation

any_associate - Iterate through each associate member of the federation - checks whether the enclosed triggers return true for any of them
any_associate = { <count=<num/all>> <triggers> }
Supported Scopes: federation

count_associate - Iterate through each associate member of the federation - checks whether the enclosed triggers return true for X/all of them
count_associate = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: federation

count_system_planet - Iterate through each planet in the current system - checks whether the enclosed triggers return true for X/all of them
count_system_planet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

count_planet_within_border - Iterate through each planet within the current empire's borders - checks whether the enclosed triggers return true for X/all of them
count_planet_within_border = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_owned_planet - Iterate through each inhabited planet owned by the current empire - checks whether the enclosed triggers return true for any of them
any_owned_planet = { <count=<num/all>> <triggers> }
Supported Scopes: country sector

count_owned_planet - Iterate through each inhabited planet owned by the current empire - checks whether the enclosed triggers return true for X/all of them
count_owned_planet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country sector

any_controlled_planet - Iterate through each inhabited planet controlled by the current empire - checks whether the enclosed triggers return true for any of them
any_controlled_planet = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_controlled_planet - Iterate through each inhabited planet controlled by the current empire - checks whether the enclosed triggers return true for X/all of them
count_controlled_planet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_galaxy_planet - Iterate through each planet ANYWHERE in the game; warning: resource intensive! - checks whether the enclosed triggers return true for any of them
any_galaxy_planet = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_galaxy_planet - Iterate through each planet ANYWHERE in the game; warning: resource intensive! - checks whether the enclosed triggers return true for X/all of them
count_galaxy_planet = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_deposit - Iterate through each deposit on the planet - checks whether the enclosed triggers return true for X/all of them
count_deposit = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet

count_moon - Iterate through each moon of the planet - checks whether the enclosed triggers return true for X/all of them
count_moon = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet

count_owned_pop - Iterate through all owned pops - checks whether the enclosed triggers return true for X/all of them
count_owned_pop = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet country pop_faction sector

any_species_pop - Iterate through each pop that belongs to this species; warning: resource-intensive! - checks whether the enclosed triggers return true for any of them
any_species_pop = { <count=<num/all>> <triggers> }
Supported Scopes: species

count_species_pop - Iterate through each pop that belongs to this species; warning: resource-intensive! - checks whether the enclosed triggers return true for X/all of them
count_species_pop = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: species

any_pop_faction - Iterate through all the country's pop factions - checks whether the enclosed triggers return true for any of them
any_pop_faction = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_pop_faction - Iterate through all the country's pop factions - checks whether the enclosed triggers return true for X/all of them
count_pop_faction = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_galaxy_sector - Iterate through all sectors in the game - checks whether the enclosed triggers return true for any of them
any_galaxy_sector = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_galaxy_sector - Iterate through all sectors in the game - checks whether the enclosed triggers return true for X/all of them
count_galaxy_sector = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

any_owned_sector - Iterate through every owned sector - checks whether the enclosed triggers return true for any of them
any_owned_sector = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_owned_sector - Iterate through every owned sector - checks whether the enclosed triggers return true for X/all of them
count_owned_sector = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

count_owned_ship - Iterate through each ship in the fleet or owned by the country - checks whether the enclosed triggers return true for X/all of them
count_owned_ship = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country fleet

count_ship_in_system - Iterate through each ship in the current system - checks whether the enclosed triggers return true for X/all of them
count_ship_in_system = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

any_owned_pop_species - Iterate through each species of a country's owned pops - checks whether the enclosed triggers return true for any of them
any_owned_pop_species = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_owned_pop_species - Iterate through each species of a country's owned pops - checks whether the enclosed triggers return true for X/all of them
count_owned_pop_species = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_galaxy_species - Check if any species in the galaxy meet the specified criteria - checks whether the enclosed triggers return true for any of them
any_galaxy_species = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_galaxy_species - Check if any species in the galaxy meet the specified criteria - checks whether the enclosed triggers return true for X/all of them
count_galaxy_species = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_owned_species - Check if any of the species <on the planet/in the country> meet the specified criteria - checks whether the enclosed triggers return true for X/all of them
count_owned_species = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet country

count_enslaved_species - Check if any of the species with enslaved pops <on the planet/in the country> meet the specified criteria - checks whether the enclosed triggers return true for X/all of them
count_enslaved_species = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: planet country

any_owned_starbase - Iterate through every owned starbase - checks whether the enclosed triggers return true for any of them
any_owned_starbase = { <count=<num/all>> <triggers> }
Supported Scopes: country

count_owned_starbase - Iterate through every owned starbase - checks whether the enclosed triggers return true for X/all of them
count_owned_starbase = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country

any_system - Iterate through all systems - checks whether the enclosed triggers return true for any of them
any_system = { <count=<num/all>> <triggers> }
Supported Scopes: all

count_system - Iterate through all systems - checks whether the enclosed triggers return true for X/all of them
count_system = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

count_rim_system - Iterate through all rim systems - checks whether the enclosed triggers return true for X/all of them
count_rim_system = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: all

any_system_within_border - Iterate through all systems within the country's or sector's borders - checks whether the enclosed triggers return true for any of them
any_system_within_border = { <count=<num/all>> <triggers> }
Supported Scopes: country sector

count_system_within_border - Iterate through all systems within the country's or sector's borders - checks whether the enclosed triggers return true for X/all of them
count_system_within_border = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country sector

count_neighbor_system - Iterate through all a system's neigboring systems by hyperlane - checks whether the enclosed triggers return true for X/all of them
count_neighbor_system = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

any_neighbor_system_euclidean - Iterate through all a system's neigboring systems (by closeness, not by hyperlanes) - checks whether the enclosed triggers return true for any of them
any_neighbor_system_euclidean = { <count=<num/all>> <triggers> }
Supported Scopes: galactic_object

count_neighbor_system_euclidean - Iterate through all a system's neigboring systems (by closeness, not by hyperlanes) - checks whether the enclosed triggers return true for X/all of them
count_neighbor_system_euclidean = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: galactic_object

any_war_participant - Iterate through all war participants - checks whether the enclosed triggers return true for any of them
any_war_participant = { <count=<num/all>> <triggers> }
Supported Scopes: war

count_war_participant - Iterate through all war participants - checks whether the enclosed triggers return true for X/all of them
count_war_participant = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: war

count_attacker - Iterate through all attackers in the current war - checks whether the enclosed triggers return true for X/all of them
count_attacker = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: war

count_defender - Iterate through all defenders in the current war - checks whether the enclosed triggers return true for X/all of them
count_defender = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: war

count_war - Iterate through all wars the country is engaged in - checks whether the enclosed triggers return true for X/all of them
count_war = {
	count = <num/all>
	limit = { <triggers> }
}
Supported Scopes: country


=================
[19:56:08][game_application.cpp:1898]: 
== EFFECT DOCUMENTATION ==
tooltip - Just a tooltip
Supported Scopes: all

win - The scoped country wins the game
win_game = yes
Supported Scopes: country

hidden_effect - Prevents enclosed effects from being displayed in tooltip
hidden_effect = { <effects> }
Supported Scopes: all

custom_tooltip - Displays a specific localization string in tooltip
custom_tooltip = <string>
Supported Scopes: all

if - Executes enclosed effects if limit criteria are met
if = { limit = { <triggers> } <effects> }
Supported Scopes: all

end_all_treaties_with - Ends all treaties with the target
end_all_treaties_with = <target>
Supported Scopes: country

random_list - Picks one random set of effects from a list, influenced by relative weight
random_list = { 50 = { <effects> } 20 = { <effects> } 30 = { <effects> } 999 = { <effects> } }
Supported Scopes: all

locked_random_list - Picks one random set of effects from a list, influenced by relative weight once per event scope
locked_random_list = { 50 = { <effects> } 20 = { <effects> } 30 = { <effects> } 999 = { <effects> } }
Supported Scopes: all

remove_deposit - Remove resource deposit on the scoped planet or deposit, does not fire on_cleared if used on a blocker
remove_deposit = <key/yes>
Supported Scopes: planet deposit

set_owner - Instantly sets the owner of the scoped planet/fleet/army/starbase to target country
set_owner = <target>
Supported Scopes: megastructure planet fleet leader army starbase

unemploy_pop - Fires scoped pop from its job
unemploy_pop = yes
Supported Scopes: pop

check_planet_employment - Immediately runs a job evaluation on the planet, firing and employing pops as needed
check_planet_employment = yes
Supported Scopes: planet

change_species_portrait - Changes the portrait of the species in scope.
change_species_portrait = <key or species event target>
Supported Scopes: species

clear_pop_category - Resets category of a pop
clear_pop_category = yes
Supported Scopes: pop

add_random_non_blocker_deposit - Adds random non-blocker resource deposit to the scoped planet
add_random_non_blocker_deposit = yes
Supported Scopes: planet

remove_last_built_building - Removes last built building from the scoped planet
remove_last_built_building = yes
Supported Scopes: planet

remove_all_buildings - Removes all buildings from the scoped planet
remove_all_buildings = yes
Supported Scopes: planet

give_technology - Instantly gives a specific tech to the scoped country
give_technology = { tech = tech_desert_colonization message = yes }
Supported Scopes: country

add_building - Begins construction of a specific building on the scoped planet
add_building = <key>
Supported Scopes: planet

add_planet_devastation - Instantly adds devastation to scoped planet
add_planet_devastation = 5
Supported Scopes: planet

create_half_species - Creates a new pop from a half-species on the planet
create_half_species = { species_one = <target> species_two = <target> }
Supported Scopes: all

calculate_modifier - Forces target planet or country to calculate its internal modifier
calculate_modifier = yes
Supported Scopes: planet

establish_branch_office - Establish branch office on scoped planet for target country
establish_branch_office = <target>
Supported Scopes: planet

close_branch_office - Close branch office on scoped planet
close_branch_office = yes
Supported Scopes: planet

clear_blockers - Removes all blockers from the scoped planet
clear_blockers = yes
Supported Scopes: planet

set_built_species - Changes the built species of the scoped object
set_built_species = <target>
Supported Scopes: country

set_first_contact_flag - Sets an arbitrarily-named flag on the scoped first contact site
set_first_contact_flag = <key>
Supported Scopes: first_contact

set_federation_flag - Sets an arbitrarily-named flag on the scoped federation
set_federation_flag = <key>
Supported Scopes: federation

set_country_flag - Sets an arbitrarily-named flag on the scoped country
set_country_flag = <key>
Supported Scopes: country

set_planet_flag - Sets an arbitrarily-named flag on the scoped planet
set_planet_flag = <key>
Supported Scopes: planet

set_fleet_flag - Sets an arbitrarily-named flag on the scoped fleet
set_fleet_flag = <key>
Supported Scopes: fleet

set_ship_flag - Sets an arbitrarily-named flag on the scoped ship
set_ship_flag = <key>
Supported Scopes: ship

remove_first_contact_flag - Removes a flag from the scoped first contact site
remove_first_contact_flag = <key>
Supported Scopes: first_contact

remove_federation_flag - Removes a flag from the scoped federation
remove_federation_flag = <key>
Supported Scopes: federation

remove_country_flag - Removes a flag from the scoped country
remove_country_flag = <key>
Supported Scopes: country

remove_planet_flag - Removes a flag from the scoped planet
remove_planet_flag = <key>
Supported Scopes: planet

remove_fleet_flag - Removes a flag from the scoped fleet
remove_fleet_flag = <key>
Supported Scopes: fleet

remove_ship_flag - Removes a flag from the scoped ship
remove_ship_flag = <key>
Supported Scopes: ship

every_owned_ship - Iterate through each ship in the fleet or owned by the country - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_ship = { limit = { <triggers> } <effects> }
Supported Scopes: country fleet

random_owned_ship - Iterate through each ship in the fleet or owned by the country - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_ship = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country fleet

create_species - Creates a new species
create_species = {
	name = <string>
	plural = <string>
	class = <species class key>
	portrait = <random/portrait id>
	homeworld = <target>
	traits = { <specific/random traits> }
	sapient = <Y/N, determines if species is pre-sapient>
	is_mod = <Y/N, determines if species is a modification of another>
	immortal = <Y/N, determines if species leaders are immortal>
}
Supported Scopes: all

create_country - Creates a new country
create_country = {
	name = <string/random>
	adjective = <string>
	contact_rule = <string>
 type = <key>
	auto_delete = <bool>
	name_list = <key>
	ship_prefix = <string>
	authority = <key>
	civics = random / { civic = <key> civic = random }
	species = <target>
	flag = <random / { icon = { category = <key> file = <filename.dds> } background = { category = <key> file = <filename.dds> } colors = { <key> <key> } }
	ethos = <random / { ethic = <key> ethic = <key> }>
	restrictions = { <restrictions, see "common\governments\readme_requirements.txt"> }
	effect = { <effects executed on country> }
}
Supported Scopes: all

create_fleet - Creates a new fleet
create_fleet = { name = <string> effect = { <create_ship, set_owner, set_location etc effects go here> } } 
Supported Scopes: all

create_army - Creates a new army
create_army = {
	name = <string>
	owner = <target>
	species = <target>/random
	type = <key>
}
Supported Scopes: planet

modify_army - Modifies army with parameters:
modify_army = {
	name = <string>
	owner = <target>
	species = <target>/random
	type = <key>
}
Supported Scopes: army

set_location - Sets the fleet/ambient object's location, can be fine-tuned
set_location = <target>
set_location = {
	target = <target>
	distance = <int/random>
	angle = <int/random>
	direction = <in_system/out_system>
}
Supported Scopes: fleet ambient_object

create_ship - Creates a new ship
create_ship = {
	name = <string/random>
	design = <ship design key/target, or use random_existing_design>
	random_existing_design = <ship size key>
	graphical_culture = <graphical culture key>
	prefix = <Y/N, determines if ship name should use owner country prefix>
	colonizer_species = <species, default: fleet owner founder species>
}
Supported Scopes: fleet starbase

set_primitive - [DEPRECATED, USE SET_COUNTRY_TYPE] Sets the scoped country as primitive
set_primitive = yes
Supported Scopes: country

create_pop - Creates a new pop on the scoped planet
create_pop = {
	species = <target / key>
ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet

create_colony - Creates a colony on the scoped planet
create_colony = {
 owner = <target>
 species = <target / key>
 ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet

set_capital - Sets the scoped planet to be the capital of its owner country
set_capital = yes
Supported Scopes: planet

change_pc - Changes the class of the scoped planet
change_pc = <class/random list>
change_pc = { class = <class/random list> inherit_entity = yes }
Supported Scopes: planet

set_star_class - Sets the star's star class, affecting system and galactic map graphics and potentially modifiers. Also changes the planet class of the system's primary star.
set_star_class = <star class>
Supported Scopes: galactic_object

random_country - Iterate through all countries - executes the enclosed effects on one of them for which the limit triggers return true
random_country = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

random_pop - Executes enclosed effects on a random pop that meets the limit criteria. Warning: deprecated, use random_owned_pop
random_pop = { limit = { <triggers> } <effects> }
Supported Scopes: planet

kill_pop - Instantly destroys the scoped pop
kill_pop = yes
Supported Scopes: pop

destroy_colony - Destroys the colony on the scoped planet
destroy_colony = yes
Supported Scopes: planet

add_experience - Adds a sum of experience points to the scoped leader
add_experience = 200
Supported Scopes: leader

set_ring - Adds or removes a planetary ring around the scoped planet
set_ring = no
Supported Scopes: planet

create_mining_station - Creates a mining station in orbit of the scoped planet
create_mining_station = { owner = <target> }
Supported Scopes: planet

create_research_station - Creates a research station in orbit of the scoped planet
create_research_station = { owner = <target> }
Supported Scopes: planet

set_pop_flag - Sets an arbitrarily-named flag on the scoped pop
set_pop_flag = <key>
Supported Scopes: pop

remove_pop_flag - Removes a flag from the scoped pop
remove_pop_flag = <key>
Supported Scopes: pop

every_owned_pop - Iterate through all owned pops - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_pop = { limit = { <triggers> } <effects> }
Supported Scopes: planet country pop_faction sector

set_name - Sets the name of the scoped country/planet/ship/fleet/leader/army/system/pop faction
set_name = <string>
Supported Scopes: megastructure planet country ship fleet galactic_object leader army pop_faction federation

set_adjective - Sets the adjective of the scoped country
set_adjective = <string>
Supported Scopes: country

set_ship_prefix - Sets the ship prefix of the scoped country
set_ship_prefix = <string>
Supported Scopes: country

add_modifier - Adds a specific modifier to the scoped object for a set duration
add_modifier = {
	modifier = <key>
	days/months/years = <int, -1 (default) means it never expires>
	multiplier = <float>/<variable> (optional)
	clear_on_owner_change = yes (optional: default no; clears modifier if planet/system/megastructure's owner changes)
}
Supported Scopes: megastructure planet country ship pop fleet galactic_object pop_faction federation spy_network espionage_operation

reduce_hp - Reduces the hull points of the scoped ship by a specific amount
reduce_hp = 120
Supported Scopes: ship

reduce_hp_percent - Reduces the hull points of the scoped ship by a relative amount
reduce_hp_percent = 0.25
Supported Scopes: ship

repair_ship - Restores all hull points to the scoped ship
repair_ship = yes
Supported Scopes: ship

set_surveyed - Sets the planet or system as un/surveyed by target country
set_surveyed = { surveyed = yes surveyor = <target> }
Supported Scopes: planet galactic_object

destroy_country - Destroys the scoped country
destroy_country = yes
Supported Scopes: country

set_variable - Sets or creates an arbitrarily-named variable with a specific value in the current scope
set_variable = { which = <string> value = <float>/<variable>/<scope> / value = { scope = <scope> variable = <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

clear_variable - Clears a previously-set variable from the game.
clear_variable = <string>
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

round_variable - Rounds a previously-set variable to the closest integer.
round_variable = <string>
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

floor_variable - Rounds a previously-set variable down to the previous integer.
floor_variable = <string>
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

ceiling_variable - Rounds a previously-set variable up to the next integer.
ceiling_variable = <string>
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

export_modifier_to_variable - Exports the value of a specified modifier in the current scope to a specified variable.
export_modifier_to_variable = { modifier = pop_growth_speed_reduction variable = <string> }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction

export_trigger_value_to_variable - Exports the value of a specified simple value trigger (i.e. no { }, returns a number on the right hand side) to a specified variable.
export_trigger_value_to_variable = { trigger = num_pops variable = <string> rounded = yes (default: no) }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

export_resource_stockpile_to_variable - Exports the value of the current country's stockpile of the specified resource to a variable.
export_resource_stockpile_to_variable = { resource = energy variable = <string> }
Supported Scopes: country

export_resource_income_to_variable - Exports the value of the current country's monthly income of the specified resource to a variable.
export_resource_income_to_variable = { resource = energy variable = <string> }
Supported Scopes: country

remove_global_flag - Removes a global flag
remove_global_flag = <key>
Supported Scopes: all

set_global_flag - Sets an arbitrarily-named global flag
set_global_flag = <key>
Supported Scopes: all

change_variable - Increments a previously-set variable by a specific amount
change_variable = { which = <string> value = <float>/<variable>/<scope> / value = { scope = <scope> variable = <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

every_galaxy_pop - Executes enclosed effects for every pop in the game that meet the limit criteria
every_galaxy_pop = { limit = { <triggers> } <effects> }
Supported Scopes: all

every_country - Iterate through all countries - executes the enclosed effects on all of them for which the limit triggers return true
every_country = { limit = { <triggers> } <effects> }
Supported Scopes: all

every_playable_country - Iterate through all playable countries - executes the enclosed effects on all of them for which the limit triggers return true
every_playable_country = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_playable_country - Iterate through all playable countries - executes the enclosed effects on one of them for which the limit triggers return true
random_playable_country = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

set_event_locked - Silently disables the scoped fleet to prevent player action, remember to unlock at the end of the event
set_event_locked = no
Supported Scopes: fleet

clear_orders - Clears all fleet orders from the scoped fleet
clear_orders = yes
Supported Scopes: fleet

order_forced_return - Forces scoped fleet to retreat to friendly territory
order_forced_return = yes
Supported Scopes: fleet

declare_war - Declares war between the scoped country and target country
declare_war = {
	target = <target country>
	name = <optional war name>
	attacker_war_goal = <war goal>
}
Supported Scopes: country

set_star_flag - Sets an arbitrarily-named flag on the scoped system
set_star_flag = <key>
Supported Scopes: galactic_object

remove_star_flag - Removes a flag from the scoped system
remove_star_flag = <key>
Supported Scopes: galactic_object

set_spawn_system_batch - Optimizes the calls for spawn_system effect.
Spawn system should be located in a block between Begin and End.
Begin: set_spawn_system_batch = begin
End: set_spawn_system_batch = end
Supported Scopes: all

spawn_system - Spawns a new system at a position relative to the scoped system/planet/ship.
spawn_system = { min_jumps = <value> max_jumps = <value> min_distance = <int 0-100> max_distance = <int 0-100> initializer = <key for pre-defined system> hyperlane=<yes/no> is_discovered=<yes/no>}
Supported Scopes: megastructure planet ship fleet galactic_object starbase no_scope

random_research_station - Executes enclosed effects on a random orbital research station that meets the limit criteria
random_research_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet

dismantle - Dismantles the scoped orbital station (fleet)
dismantle = yes
Supported Scopes: fleet

random_mining_station - Executes enclosed effects on a random orbital mining station that meets the limit criteria
random_mining_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet

set_advisor_active - Enables or disables the VIR window pop-in
set_advisor_active = no
Supported Scopes: country

save_event_target_as - Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain
save_event_target_as = <string>
Supported Scopes: all

save_global_event_target_as - Saves the current scope as an arbitrarily-named target to be referenced later, accessible globally until cleared
save_global_event_target_as = <string>
Supported Scopes: all

clear_global_event_target - Deletes the specified saved global target reference
clear_global_event_target = <string>
Supported Scopes: all

clear_global_event_targets - Deletes all saved global target references
clear_global_event_targets = yes
Supported Scopes: all

break - Prevents execution of subsequent effects in the same effect block, used with if-statements
break = yes
Supported Scopes: all

set_tutorial_level - Changes the scoped country's tutorial level (0 none, 1 limited, 2 full)
set_tutorial_level = 0
Supported Scopes: country

begin_event_chain - Starts a situation log event chain for target country
begin_event_chain = { event_chain = <key> target = <target> }
Supported Scopes: all

end_event_chain - Ends a specific situation log event chain for the scoped country
end_event_chain = <key>
Supported Scopes: country

queue_actions - Adds actions to the scoped fleet's action queue
queue_actions = { repeat = { <fleet actions> } }
Supported Scopes: fleet

clear_fleet_actions - Clears all queued fleet actions for target fleet
clear_fleet_actions = <target>
Supported Scopes: fleet

destroy_fleet - Destroys the target fleet (with death graphics)
destroy_fleet = <target>
destroy_fleet = {
	target=<target>
	kill_leader=<yes/no> #default yes
	destroy_template=<yes/no> #default no
}
Supported Scopes: all

destroy_and_spawn_debris_for - Sets the current ship or fleet to be destroyed and spawn a debris project for the specified country.
destroy_and_spawn_debris_for = from
Supported Scopes: ship fleet

create_ambient_object - Creates a new ambient object
create_ambient_object = { type = <key> location = <target> }
For VFX use:
create_ambient_object = {
	type = <key>
	scale = <float>
	location = <target>
	use_3d_location = <bool, use 3D entity or 2D coordinate of the location entity as base>
	entity_offset = {
		min = <int>
		max = <int>
	}
	entity_offset_angle = {
		min = <int>
		max = <int>
	}
	entity_offset_height = {
		min = <int>
		max = <int>
	}
 entity_face_object = star/FROM/etc
 entity_scale_to_size = yes/no
	play_animation_once = yes/no
	target = <target>
	duration = <int, days>
}
Supported Scopes: all

destroy_ambient_object - Destroys target ambient object
destroy_ambient_object = <target>
Supported Scopes: all

add_trait - Adds a specific trait to the scoped leader
add_trait = <trait>
Supported Scopes: leader

remove_trait - Removes a specific trait from the scoped leader
remove_trait = <key>
Supported Scopes: leader

modify_species - Creates a new, modified species based on an already-extant species
modify_species = {
	species = <target> # species to modify
	base = <target>/auto/none # new base species; default: auto (uses species)
	add_trait = <key> # optional, can specify multiple
	remove_trait = <key> # optional, can specify multiple
	ideal_planet_class = <target or pc_name> # optional
	change_scoped_species = yes/no # modify scoped pops/planet/leader/country; default: yes
	portrait = <target or portrait name> # optional
	effect = { SCOPE_SPECIES } # optional effect to run on the resulting new species, is executed after any handling of change_scoped_species
}
Supported Scopes: planet country pop leader species

add_opinion_modifier - Adds a specific opinion modifier for the scoped country towards target country
add_opinion_modifier = { modifier = <key> who = <target> }
Supported Scopes: country

establish_contact - Establishes first contact between the scoped country and target country at the set location
establish_contact = { who = <target> location = <target> }
Supported Scopes: country

set_hostile - Sets the target country as hostile. This will work on countries you don't have comms with, unlike set_faction_hostility.
set_hostile = from
Supported Scopes: country

set_faction_hostility - Sets the aggro state of the scoped faction-type country
set_faction_hostility = { target = country set_hostile = yes set_neutral = no set_friendly = no }
Supported Scopes: country

set_market_leader - Set scoped country as the current Galactic Market leader. set_market_leader = <yes/no> 
Supported Scopes: country

random_system_planet - Iterate through each planet in the current system - executes the enclosed effects on one of them for which the limit triggers return true
random_system_planet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

add_event_chain_counter - Increments (or decrements with negative values) an event chain counter for the scoped country by a specific amount
add_event_chain_counter = { event_chain = <key> counter = <key> amount = <int> }

Supported Scopes: country

add_anomaly - Adds a specific anomaly category to the scoped planet
add_anomaly = {
 category = <key>
 target = target:country }
Supported Scopes: all

set_disable_at_health - Sets the scoped ship to become disabled at a certain hull point percentage
set_disable_at_health = <0-1 float>
Supported Scopes: ship

remove_building - Removes a specific building from the scoped planet
remove_building = <key>
Supported Scopes: planet

change_planet_size - Increases or reduces the size of the scoped planet by a specified amount
change_planet_size = <+/- int>
Supported Scopes: planet

every_deposit - Iterate through each deposit on the planet - executes the enclosed effects on all of them for which the limit triggers return true
every_deposit = { limit = { <triggers> } <effects> }
Supported Scopes: planet

random_deposit - Iterate through each deposit on the planet - executes the enclosed effects on one of them for which the limit triggers return true
random_deposit = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet

set_policy_cooldown - Sets the specified policy group to have a cooldown as if the policy had just been changed.
set_policy_cooldown = <policy group e.g. diplomatic_stance>
Supported Scopes: planet country ship pop

create_point_of_interest - Creates a point of interest for the scoped country at a specific location, associated with an event chain
create_point_of_interest = { id = <key> name = <string> desc = <string> event_chain = <key> location = <target> }
Supported Scopes: planet country ship pop

remove_point_of_interest - Removes a specific point of interest from the scoped country's situation log
remove_point_of_interest = <key>
Supported Scopes: country

set_relation_flag - Sets a relation flag for the scoped country towards target country
set_relation_flag = { who = <target> flag = <key> }
Supported Scopes: country

remove_relation_flag - Removes a specific relation flag towards target country from the scoped country
remove_relation_flag = { who = <target> flag = <key> }
Supported Scopes: country

random_moon - Iterate through each moon of the planet - executes the enclosed effects on one of them for which the limit triggers return true
random_moon = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet

every_moon - Iterate through each moon of the planet - executes the enclosed effects on all of them for which the limit triggers return true
every_moon = { limit = { <triggers> } <effects> }
Supported Scopes: planet

kill_leader - Kills the scoped leader or leader of the scoped country/fleet/ship/planet/army
kill_leader = { type = general type = scientist etc. }
kill_leader = {
	type = <key, optional, if left out will kill scoped leader> 
	show_notification = <yes/no> heir = <yes, optional, if added to type = ruler, will kill heir instead>
	fire = yes (default: no; if yes, fires on_leader_fired instead of on_leader_death
}
Supported Scopes: planet country ship fleet leader army

assign_leader - Assigns target leader to the scoped country/fleet/army/pop faction/sector
assign_leader = <target>
Supported Scopes: country fleet army pop_faction sector

country_add_ethic - Adds a specific ethic to the scoped country
country_add_ethic = <key>
Supported Scopes: country

country_remove_ethic - Removes a specific ethic from the scoped country
country_remove_ethic = <key>
Supported Scopes: country

set_timed_first_contact_flag - Sets an arbitrarily-named flag on the scoped first contact site for a set duration
set_timed_first_contact_flag = { flag = <key> days = <int> }
Supported Scopes: first_contact

set_timed_federation_flag - Sets an arbitrarily-named flag on the scoped federation for a set duration
set_timed_federation_flag = { flag = <key> days = <int> }
Supported Scopes: federation

set_timed_country_flag - Sets an arbitrarily-named flag on the scoped country for a set duration
set_timed_country_flag = { flag = <key> days = <int> }
Supported Scopes: country

set_timed_fleet_flag - Sets an arbitrarily-named flag on the scoped fleet for a set duration
set_timed_fleet_flag = { flag = <key> days = <int> }
Supported Scopes: fleet

set_timed_global_flag - Sets an arbitrarily-named global flag for a set duration
set_timed_global_flag = { flag = <key> days = <int> }
Supported Scopes: all

set_timed_planet_flag - Sets an arbitrarily-named flag on the scoped planet for a set duration
set_timed_planet_flag = { flag = <key> days = <int> }
Supported Scopes: planet

set_timed_pop_flag - Sets an arbitrarily-named flag on the scoped pop for a set duration
set_timed_pop_flag = { flag = <key> days = <int> }
Supported Scopes: pop

set_timed_relation_flag - Sets an arbitrarily-named flag for the scoped country towards target country for a set duration
set_timed_relation_flag = { flag = <key> who = <target> days = <int> }
Supported Scopes: country

set_timed_ship_flag - Sets an arbitrarily-named flag on the scoped ship for a set duration
set_timed_ship_flag = { flag = <key> days = <int> }
Supported Scopes: ship

set_timed_star_flag - Sets an arbitrarily-named flag on the scoped system for a set duration
set_timed_star_flag = { flag = <key> days = <int> }
Supported Scopes: galactic_object

every_planet_within_border - Iterate through each planet within the current empire's borders - executes the enclosed effects on all of them for which the limit triggers return true
every_planet_within_border = { limit = { <triggers> } <effects> }
Supported Scopes: country

every_rim_system - Iterate through all rim systems - executes the enclosed effects on all of them for which the limit triggers return true
every_rim_system = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_rim_system - Iterate through all rim systems - executes the enclosed effects on one of them for which the limit triggers return true
random_rim_system = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

remove_modifier - Removes a specific modifier from the scope object
remove_modifier = <key>
Supported Scopes: megastructure planet country ship pop fleet galactic_object pop_faction federation spy_network espionage_operation

add_ship_design - Adds a specific ship design to the scoped country
add_ship_design = <target>
Supported Scopes: country

add_mission_progress - Adds or subtracts progress to/from the scoped observation post's current mission
add_mission_progress = <+/- float>
Supported Scopes: fleet

create_army_transport - Creates a new army in a new transport ship
create_army_transport = {
	ship_name = <string>
	graphical_culture = <key>
	army_name = <string>
	army_type = <key>
	species = <target>
}
Supported Scopes: fleet

switch - Executes the first appropriate effect set for a specific trigger
switch = {
	trigger = <trigger>
	<corresponding key/bool/int> = { <effect> }
	<corresponding key/bool/int> > (less/greater than appear 'reversed') { <effect> }
	default = { <effect> }
}
Supported Scopes: all

set_pop_faction - Sets the scoped pop to belong to a specific pop faction
set_pop_faction = <target>
Supported Scopes: pop

set_graphical_culture - Sets the scoped object's graphical culture
set_graphical_culture = <key>
Supported Scopes: megastructure country

set_formation_scale - Scales the scoped fleet's formation's ship spacing, above and below 1.0
set_formation_scale = <float>
Supported Scopes: fleet

set_controller - Instantly sets the planet/fleet's controller to target country
set_controller = <target>
Supported Scopes: planet fleet

force_faction_evaluation - Forces target pop to immediately evaluate their attraction to various pop factions
force_faction_evaluation = yes
Supported Scopes: pop

enable_faction_of_type - Forces scoped country to evaluate whether to create a specific faction type immediately, rather than monthly
enable_faction_of_type = <key>
Supported Scopes: country

clear_uncharted_space - Clears uncharted space from the galaxy map for the scoped country, in a radius around target system
clear_uncharted_space = { from = <target> }
Supported Scopes: country

every_owned_leader - Iterate through each leader that is owned by the country - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_leader = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_owned_leader - Iterate through each leader that is owned by the country - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_leader = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

establish_communications - Establish communications between scoped country and target country
establish_communications = <target>
Supported Scopes: country

add_monthly_resource_mult - Adds a lump sum of a resource to the scoped country, defined as a multiple of the country's monthly income of that resource (clamped to max and min allowed values)
add_monthly_resource_mult = { resource = <key> value = <multiplier, float> max = <max cap, int> min = <min cap, int> }
Supported Scopes: country

set_leader_flag - Sets an arbitrarily-named flag on the scoped leader
set_leader_flag = <key>
Supported Scopes: leader

remove_leader_flag - Removes a flag from the scoped leader
remove_leader_flag = <key>
Supported Scopes: leader

add_research_option - Adds a tech research option to the scoped country's tech view list, permanent until researched
add_research_option = <key>
Supported Scopes: country

set_heir - Sets the target leader to be the scoped country's heir
set_heir = <target>
Supported Scopes: country

leave_alliance - Removes scoped country from any alliances it is in
leave_alliance = {
	override_requirements = yes/no (default: no)
	apply_opinion_penalty = yes (default: no; sets whether 'Broke Federation' opinion is applied)
}
Supported Scopes: country

random_owned_pop - Iterate through all owned pops - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_pop = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet country pop_faction sector

set_policy - Sets a policy to a specific option for the scoped country and specifies if policy cooldown should go into effect
set_policy = { policy = <key> option = <key> cooldown = <bool> }
Supported Scopes: all

recruitable - Sets scoped leader as non/recruitable
recruitable = yes
Supported Scopes: leader

closest_system - Executes enclosed effects on a system -within a specific number of jumps span- that meets the limit criteria. This completely ignores bypasses (wormholes and gateways)
closest_system = {
	min_steps = <int, minimum # of systems 'away'>
	max_steps = <int, maximum # of systems 'away'>
	use_bypasses = yes/no (default: no)
	limit = { <triggers> }
	<effects>
}
Supported Scopes: all

random_owned_fleet - Iterate through each fleet owned by the country - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_fleet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

random_ambient_object - Iterate through every ambient object in the game - executes the enclosed effects on one of them for which the limit triggers return true
random_ambient_object = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

random_system_ambient_object - Iterate through every ambient object in the solar system - executes the enclosed effects on one of them for which the limit triggers return true
random_system_ambient_object = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

every_ambient_object - Iterate through every ambient object in the game - executes the enclosed effects on all of them for which the limit triggers return true
every_ambient_object = { limit = { <triggers> } <effects> }
Supported Scopes: all

every_system_ambient_object - Iterate through every ambient object in the solar system - executes the enclosed effects on all of them for which the limit triggers return true
every_system_ambient_object = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

set_ambient_object_flag - Sets an arbitrarily-named flag on the scoped ambient object
set_ambient_object_flag = <key>
Supported Scopes: ambient_object

set_timed_ambient_object_flag - Sets an arbitrarily-named flag on the scoped ambient object for a set duration
set_timed_ambient_object_flag = { flag = <key> days = <int> }
Supported Scopes: fleet

remove_ambient_object_flag - Removes a flag from the scoped ambient object
remove_ambient_object_flag = <key>
Supported Scopes: ambient_object

every_fleet_in_system - Iterate through each fleet in the current system - executes the enclosed effects on all of them for which the limit triggers return true
every_fleet_in_system = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

random_fleet_in_system - Iterate through each fleet in the current system - executes the enclosed effects on one of them for which the limit triggers return true
random_fleet_in_system = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

set_aggro_range - Sets the scoped fleet/country's aggro range in intra-system units
set_aggro_range = <int>
Supported Scopes: country fleet

set_fleet_stance - Sets the stance of the scoped fleet
set_fleet_stance = <key, aggressive/passive/evasive>
Supported Scopes: fleet

add_favors - Add <value> favors for scoped country to use on target country. add_favor = {
 target = <target>
 value = 2 }
Supported Scopes: country

remove_favors - Remove <value/all> favors that scoped country have on target country:
remove_favors = {
target = <target>
value = <value/all> }
Supported Scopes: country

set_aggro_range_measure_from - Determines whether the scoped fleet/country's aggro range is measured from the fleet's current position or its spawn location
set_aggro_range_measure_from = <key, self/return_point>
Supported Scopes: country fleet

establish_communications_no_message - Silently establish communications between scoped country and target country
establish_communications_no_message = <target>
Supported Scopes: country

remove_war_participant - Removes a specified country from the war
remove_war_participant = <target>
Supported Scopes: war

set_subject_of - Sets the scoped country to be a specific subject of target country
set_subject_of = { who = <target> subject_type = <key> }
Supported Scopes: country

unassign_leader - Unassigns scoped leader from their post or unassigns leader from the scoped planet/ship/fleet/army
unassign_leader = <target>
Supported Scopes: ship fleet leader army

exile_leader_as - Exiles the scoped country/fleet/army/pop faction's leader and saves them with a custom name
exile_leader_as = <key>
Supported Scopes: country fleet leader army pop_faction

set_leader - Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
set_leader = <key>
Supported Scopes: country fleet army pop_faction

add_skill - Adds a sum of experience points to the scoped leader
add_skill = 200
Supported Scopes: leader

set_skill - Sets the scoped leader's level
set_skill = 3
Supported Scopes: leader

every_neighbor_system - Iterate through all a system's neigboring systems by hyperlane - executes the enclosed effects on all of them for which the limit triggers return true
every_neighbor_system = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

random_neighbor_system - Iterate through all a system's neigboring systems by hyperlane - executes the enclosed effects on one of them for which the limit triggers return true
random_neighbor_system = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

set_federation_leader - Sets a country to lead a federation
set_federation_leader = <target>
Supported Scopes: country federation

add_colony_progress - Adds to ongoing colonization progress on the scoped planet
add_colony_progress = <0.0-1.0>
Supported Scopes: planet

start_colony - Starts colonization of the scoped planet
start_colony = {
	owner = <target>
	species = <target / key>
	ethos = <random / target / { ethic = <key> ethic = <key> }>
}
Supported Scopes: planet

subtract_variable - Decrements a previously-set variable by a specific amount
subtract_variable = { which = <string> value = <float>/<variable>/<scope> / value = { scope = <scope> variable = <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

multiply_variable - Multiplies a previously-set variable by a specific amount
multiply_variable = { which = <string> value = <float>/<variable>/<scope> / value = { scope = <scope> variable = <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

divide_variable - Divides a previously-set variable by a specific amount
divide_variable = { which = <string> value = <float>/<variable>/<scope> / value = { scope = <scope> variable = <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

modulo_variable - Modulos a previously-set variable by a specific amount i.e. X % Y
modulo_variable = { which = <string> value = <float>/<variable>/<scope> / value = { scope = <scope> variable = <variable> } }
Supported Scopes: megastructure planet country ship pop fleet galactic_object leader army species pop_faction war federation starbase sector first_contact

play_sound - Play the defined sound effect
play_sound = myfirstsoundeffect
Supported Scopes: all

set_crisis_sound - Sets the crisis ambient loop to the current effect
set_crisis_sound = myfirstsoundeffect
Supported Scopes: all

stop_crisis_sound - Stops the crisis ambient loop
stop_crisis_sound = yes
Supported Scopes: all

force_add_civic - Adds civic to a government without checking the restrictions
force_add_civic = <civic>
Supported Scopes: country

force_remove_civic - Removes civic from a government without checking the restrictions
force_remove_civic = <civic>
Supported Scopes: country

set_origin - Sets the country's origin to a certain value. Note: This will not run effects executed during galaxy generation.
set_origin = <origin>
Supported Scopes: country

set_is_female - Sets the gender of the scoped leader
set_is_female = true
Supported Scopes: leader

create_fleet_from_naval_cap - Creates a new fleet from empire designs up to specified fraction of naval cap
create_fleet_from_naval_cap = 0.5
create_fleet_from_naval_cap = { fraction = 0.5 ship_owner_type = <country/federation/galactic_community>
Supported Scopes: country

remove_opinion_modifier - Removes a specific opinion modifier towards target country or any contry from the scoped country
remove_opinion_modifier = { modifier = <key> who = <target (optional)> }
Supported Scopes: country

set_war_goal - Sets a war goal to the scoped rebel country/war
set_war_goal = { type = <key> target = <target> enemy = <target> }
Supported Scopes: country war

change_country_flag - Changes the scoped country's flag
change_country_flag = random
change_country_flag = { icon = { category = <key> file = <filename> } background = { category = <key> file = <filename> } colors = { <key> <key> } }
Supported Scopes: country

add_threat - Adds diplomatic threat from target country
add_threat = { who = <country> amount = 4 }
Supported Scopes: planet country galactic_object

set_mission - Sets the current mission of an observation station
set_mission = passive_observation
Supported Scopes: fleet

change_dominant_species - Changes the dominant species of the current Country, change_all also changes all usage of that species (Pops etc) in the empire
change_dominant_species = { species = target change_all = yes }
Supported Scopes: country

end_rivalry - Force-end rivalry with target country
end_rivalry = <target>
Supported Scopes: country

set_truce - Force a truce with target country of a specified type, or a war
set_truce = { target = <country/war> type = war/liberation/alliance/guarantee/none }
Supported Scopes: country

end_truce - Force-end truce with target country
end_truce = <target>
Supported Scopes: country

set_species_flag - Sets an arbitrarily-named flag on the scoped species
set_species_flag = <key>
Supported Scopes: species

set_timed_species_flag - Sets an arbitrarily-named flag on the scoped species for a set duration
set_timed_species_flag = { flag = <key> days = <int> }
Supported Scopes: species

remove_species_flag - Removes a flag from the scoped species
remove_species_flag = <key>
Supported Scopes: species

auto_move_to_planet - Makes a fleet or ship auto-move to target planet
auto_move_to_planet = { target = <planet> clear_auto_move_on_arrival = yes }
Supported Scopes: ship fleet

remove_auto_move_target - Makes a fleet or ship stop auto-moving
remove_auto_move_target = yes
Supported Scopes: ship fleet

auto_follow_fleet - Makes a fleet or ship auto-move to target fleet and potentially attack it
auto_follow_fleet = { target = <fleet> attack_fleet = yes }
Supported Scopes: ship fleet

set_closed_borders - Changes closed borders status between two countries
set_closed_borders = { who = target status = yes/no}
Supported Scopes: country

every_war_participant - Iterate through all war participants - executes the enclosed effects on all of them for which the limit triggers return true
every_war_participant = { limit = { <triggers> } <effects> }
Supported Scopes: war

repair_percentage - Restores a certain percentage of hull points to the scoped ship
repair_percentage = yes
Supported Scopes: ship fleet

endgame_telemetry - Send endgame telemetry event
Supported Scopes: all

set_deposit - Replaces resource deposit on the scoped planet
set_deposit = <key/random>
Supported Scopes: planet

randomize_flag_symbol - Randomizes a country's flag symbol within the selected category
randomize_flag_symbol = pirate
Supported Scopes: country

add_claims - Adds claims on target system
add_claims = { who = <country> num_of_claims = x show_notification = no }
Supported Scopes: galactic_object

remove_claims - Removes claims on target system
remove_claims = { who = <country> num_of_claims = x }
Supported Scopes: galactic_object

create_military_fleet - Creates a military fleet with the designs of a specified country.
create_military_fleet = { owner = <target> scaled_size = 1.0 effect = { } }
Supported Scopes: all

guarantee_country - Makes a country guarantee another country
guarantee_country = <target>
guarantee_country = { target = <target> free_guarantee_days = 30
Supported Scopes: country

every_owned_fleet - Iterate through each fleet owned by the country - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: country

every_subject - Iterate through all subjects of the scoped country - executes the enclosed effects on all of them for which the limit triggers return true
every_subject = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_subject - Iterate through all subjects of the scoped country - executes the enclosed effects on one of them for which the limit triggers return true
random_subject = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

set_species_homeworld - Defines a homeworld for the current species.
set_species_homeworld = <target planet>
Supported Scopes: species

clear_resources - Clears resources of a country
clear_resources = yes
Supported Scopes: country

reroll_planet_modifiers - Rebuild modifiers on target planet
reroll_planet_modifiers = yes
Supported Scopes: planet

reroll_deposits - Rebuild resource deposits on target planet
reroll_deposits = yes
Supported Scopes: planet

delete_fleet - Deletes the target fleet (no death graphics)
delete_fleet = <target>
delete_fleet = {
	target=<target>
	kill_leader=<yes/no> #default yes
	destroy_template=<yes/no> #default no
}
Supported Scopes: all

add_trust - Adds trust on scope country towards target country
add_trust = { amount = <amount> who = <target> }
Supported Scopes: country

add_tradition - Adds the specified tradition to the scoped country. add_tradition = <tradition_key>
Supported Scopes: country

join_war - Joins wars on the side of target country
join_war = <target>
Supported Scopes: country

add_global_ship_design - Adds a specific global design to the game
add_global_ship_design = <target>
Supported Scopes: all

every_mining_station - Executes enclosed effects on every orbital mining station in the game that meets the limit criteria
every_mining_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet country

every_research_station - Executes enclosed effects on every orbital mining station in the game that meets the limit criteria
every_mining_station = { limit = { <triggers> } <effects> }
Supported Scopes: planet country

set_timed_leader_flag - Sets an arbitrarily-named flag on the scoped leader for a set duration
set_timed_leader_flag = { flag = <key> days = <int> }
Supported Scopes: leader

set_species_identity - Sets the current species scopes identity to match the target scopes making them evaluate as the same species in is_same_species trigger.
set_species_identity = new/<target species>
Supported Scopes: species

pop_force_add_ethic - Adds a specific ethic to the scoped pop regardless if pop-species allows ethic divergence or not. 
pop_force_add_ethic = <key>
Supported Scopes: pop

set_empire_name - Sets the name of the current Empire.
set_empire_name = "name"
Supported Scopes: country

set_empire_flag - Sets the flag of the current Empire.
set_empire_flag = <flag>
Supported Scopes: country

set_planet_name - Sets the name of the current planet.
set_planet_name = "name"
Supported Scopes: planet

set_fleet_formation - Sets a custom fleet formation on a fleet. 
set_fleet_formation = { position = { x = 1 y = 1 } position = { x = 2 y = 1 } }
Supported Scopes: fleet

create_message - Creates a message, can take multiple variables
create_message = { type = BYPASS_EXPLORED localization = BYPASS_EXPLORED_MESSAGE days = 30 target = root variable = { type = name localization = SYSTEM1 scope = from } variable = { type = name localization = SYSTEM2 scope = fromfrom } }
Supported Scopes: all

set_halted - Sets the mega structure upgrade to halted status for n days
set_halted = nDays
Supported Scopes: megastructure

upgrade_megastructure_to - Starts an upgrade process on a mega structure. 
upgrade_megastructure_to = <new_type>
Supported Scopes: megastructure

set_planet_entity - Change entity of a planet.
Example:
set_planet_entity = {
	entity = <name of entity>
	graphical_culture = <target or name of culture>
	picture = <picture override>
	atmosphere_color = <color from 3 components>
	atmosphere_intensity = <0.0 - 1.0>
	atmosphere_width = <0.0 - 1.0> 
}
Supported Scopes: planet

remove_planet - Removes the planet from the scope 
remove_planet = yes
Supported Scopes: planet

set_megastructure_flag - Sets an arbitrarily-named flag on the scoped mega structure
set_megastructure_flag = <key>
Supported Scopes: megastructure

set_timed_megastructure_flag - Sets an arbitrarily-named flag on the scoped mega structure for a set duration
set_timed_megastructure_flag = { flag = <key> days = <int> }
Supported Scopes: megastructure

remove_megastructure_flag - Removes a flag from the scoped mega structure
remove_megastructure_flag = <key>
Supported Scopes: megastructure

destroy_ship - Destroys the target ship (with death graphics)
destroy_ship = <target>
Supported Scopes: all

delete_ship - Deletes the target ship (no death graphics)
delete_ship = <target>
Supported Scopes: all

change_species - Changes the species of the scoped object
change_species = <target>
Supported Scopes: country ship pop leader army

change_leader_portrait - Changes the portrait of the leader in scope.
change_leader_portrait = <key or species event target>
Supported Scopes: leader

resettle_pop - Instantly resettles pop
resettle_pop = { pop = <target pop> planet = <target planet> tile = <target tile> }
Supported Scopes: all

set_citizenship_type - Set citizenship type for scoped species/pop/leader
set_citizenship_type = { country = <target> type = citizenship_full cooldown = yes }
Supported Scopes: pop leader species

set_military_service_type - Set military service type for scoped species/pop/leader
set_military_service_type = { country = <target> type = military_service_full cooldown = yes }
Supported Scopes: pop leader species

set_purge_type - Set purge type for scoped species/pop/leader
set_purge_type = { country = <target> type = purge_full cooldown = yes }
Supported Scopes: pop leader species

set_slavery_type - Set slavery type for scoped species/pop/leader
set_slavery_type = { country = <target> type = slavery_livestock cooldown = yes }
Supported Scopes: pop leader species

set_population_controls - Set population control for scoped species/pop/leader
set_population_controls = { country = <target> type = yes/no cooldown = yes }
Supported Scopes: pop leader species

set_migration_controls - Set migration control for scoped species/pop/leader
set_migration_controls = { country = <target> type = yes/no cooldown = yes }
Supported Scopes: pop leader species

set_colonization_controls - Set colonization control for scoped species/pop/leader
set_colonization_controls = { country = <target> type = yes/no cooldown = yes }
Supported Scopes: pop leader species

set_living_standard - Set living standard for scoped species/pop/leader
set_living_standard = { country = <target> type = living_standard_good cooldown = yes }
Supported Scopes: pop leader species

shift_ethic - Shifts an empire towards a specific ethic, adjusting aferwards to keep number of ethics points consistent
shift_ethic = <key>
Supported Scopes: country

pop_change_ethic - Changes scoped pop to chosen ethic
pop_change_ethic = <key>
Supported Scopes: pop

clear_ethos - Clears all ethics of specified pop or country
clear_ethos = yes
Supported Scopes: country pop

clear_planet_modifiers - Clear modifiers on target planet
clear_planet_modifiers = yes
Supported Scopes: planet

remove_all_armies - Removes all armies on scoped planet
remove_all_armies = yes
Supported Scopes: planet

mutate_species - Randomly mutate a species.
mutate_species = yes
Supported Scopes: species

rename_species - rename_species = { 
	use one of the following:
	name = "an explicit name with [Bracket.Stuff]"
	name = random
	name_list = "key"
}
Supported Scopes: species

reset_years_of_peace - Resets years of peace for a country.
reset_years_of_peace = yes
Supported Scopes: country

add_ruler_trait - Adds a specific ruler trait to the scoped leader, even if they are not currently ruler; it becomes active when they become ruler
add_ruler_trait = <trait>
Supported Scopes: leader

remove_ruler_trait - Removes a specific ruler trait from the scoped leader, even if they are not currently ruler; this is relevant if they ever become ruler
remove_ruler_trait = <trait>
Supported Scopes: leader

add_notification_modifier - Add a notification modifier to the country
add_notification_modifier = <key>
Supported Scopes: country

remove_notification_modifier - Remove a notification modifier to the country
remove_notification_modifier = <key>
Supported Scopes: country

set_city_graphical_culture - Sets the scoped country's city graphical culture
set_city_graphical_culture = <key>
Supported Scopes: country

set_player - Assign the player of the target country to play the scoped country instead
event_target:new_country = { set_player = event_target:old_country }
Supported Scopes: country

change_species_characteristics - Changes the characteristics of a species
change_species_characteristics = {
	sapient = <Y/N, determines if species is pre-sapient>
	immortal = <Y/N, determines if species leaders are immortal>
	pops_can_be_colonizers = <Y/N, determines if pops of that species can colonize>
	pops_can_migrate = <Y/N, determines if pops of that species can migrate>
	pops_can_reproduce = <Y/N, determines if pops of that species can reproduce>
	pops_can_join_factions = <Y/N, determines if pops of that species can join factions>
	can_generate_leaders = <Y/N, determines if that species can generate leaders>
	pops_can_be_slaves = <Y/N, determines if pops from that species can become slaves>
	pops_have_happiness = <Y/N, determines if pops from that species have happiness>
	can_be_modified = <Y/N, determines if the species can be modified>
	pops_auto_growth = <1, speed at which the pops from that species grow automatically
	pop_maintenance = <1, amount of energy each pop of that species consume monthly
	new_pop_resource_requirement = { type = food_surplus value = 42 }
	portrait = <key or species event target>

Supported Scopes: species

copy_techs_from - Copies all techs from the target country to the scoped country, except for some exceptions listed. Tech weights (and weight modifiers) are honoured, meaning that techs a country should not have will not be copied.
copy_techs_from = { 
	target = country
	except = { tech_1 tech_2 }
}
Supported Scopes: country

create_bypass - Creates a bypass in the parent SpatialObject (stored in FromFrom), of the type passed in "type".
create_bypass = { owner = <target> type = <bypass type> effect = { <effects> } }
Supported Scopes: megastructure

activate_gateway - Activates the gateway associated with a megastructure.
activate_gateway = <target>
Supported Scopes: all

spawn_natural_wormhole - Spawns a new natural wormhole in the scoped system.
spawn_natural_wormhole = { bypass_type = <wormhole/sealed_wormhole> orbit_distance = 100 orbit_angle = 90 random_pos = yes/no }
Supported Scopes: galactic_object

link_wormholes - Link the wormhole from the scoped system to the wormhole in the target system.
link_wormholes = from
Supported Scopes: galactic_object

create_starbase - Creates a starbase in orbit of the star of the scoped galactic object
create_starbase = {
	owner = <target>
	size = <ship_size>
	module = <starbase_module>
	building = <starbase_building>
	effect = { ... }
}
Supported Scopes: galactic_object

set_starbase_size - Sets the ship size of a starbase
set_starbase_size = <ship_size>
Supported Scopes: starbase

set_starbase_module - Sets a module in a slot on a starbase
set_starbase_module = { slot = <int> module = <starbase_module> }
Supported Scopes: starbase

set_starbase_building - Sets a building in a slot on a starbase
set_starbase_building = { slot = <int> buiding = <starbase_buildin> }
Supported Scopes: starbase

remove_starbase_module - Removes a module from a certain slot or all slots on a starbase
remove_starbase_module = { slot = <int> (optional, default = all) module = <starbase_module> (optional) }
Supported Scopes: starbase

remove_starbase_building - Remove a building from a certain slot or all slots on a starbase
remove_starbase_building = { slot = <int> (optional, default = all) building = <starbase_building> (optional) }
Supported Scopes: starbase

add_casus_belli - Adds a Casus Belli to the scoped country against the target country.
add_casus_belli = { type = cb_subjugation who = <country> days = 10 }
Supported Scopes: country

get_galaxy_setup_value - Copies a value from the galaxy setup into a variable, optionally scaling it by an int value
get_galaxy_setup_value = { which = <string> setting = <string> [ scale_by = <float> ] }
possible values: num_empires, num_advanced_empires, num_fallen_empires, num_marauder_empires, mid_game_year, end_game_year, victory_year, num_guaranteed_colonies, num_gateways, num_wormhole_pairs, num_hyperlanes, habitable_worlds_scale, primitive_worlds_scale, crisis_strength_scale, tech_costs_scale
Supported Scopes: all

finish_upgrade - Finish the current upgrade of a Mega Structure.
finish_upgrade = yes
Supported Scopes: megastructure

effect_on_blob - Executes an effect on systems with planets owned by the scoped country, starting at an origin, and until a certain percentage of owned planets matching the planet_limit has been covered.
effect_on_blob = {
	center = <system target>
	owned_planets_percentage = 1.0
	planet_limit = { <planet triggers> }
	effect = { <system effects> }
}
Supported Scopes: country

add_seen_bypass_type - Makes the scoped country remember that it has encountered the bypass type
add_seen_bypass_type = bypass_type
Supported Scopes: country

add_seen_bypass - Makes the scoped country remember that it has encountered the bypass 
add_seen_bypass = FROM
Supported Scopes: country

set_fleet_bombardment_stance - Sets the bombardment stance of the scoped fleet
set_fleet_bombardment_stance = selective
Supported Scopes: fleet

check_casus_belli_valid - Re-evaluate the specified casus belli type with given target country
check_casus_belli_valid = {
	target = none/<optional country target>
	type = <optional casus belli type>
}
Supported Scopes: country

copy_ethos_and_authority - Makes the scoped country copy the ethos and government authority of the target country.
copy_ethos_and_authority = FROM
Supported Scopes: country

clone_leader - Clones the last created leader for the scoped country
clone_leader = {
	target = <event target>
	#properties to override, see create_leader
	effect = { ... }
}
Supported Scopes: country

set_home_base - Set the home base of the scoped fleet to the specified starbase
set_home_base = event_target:cool_starbase
Supported Scopes: fleet

add_hyperlane - Adds a hyperlane between two systems
add_hyperlane = { from = <system> to = <system> }
Supported Scopes: all

remove_hyperlane - Removes existing hyperlane between two systems
remove_hyperlane = { from = <system> to = <system> }
Supported Scopes: all

else_if - Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met, and its own limit is met
if = { limit = { <triggers> } <effects> }
else_if = { limit = { <triggers> } <effects> }
Supported Scopes: all

create_saved_leader - Creates a new saved leader for the scoped country with a lookup key
create_saved_leader = {
	key = <string>
	creator = <target>
	name = <random / string>
	species = <target / key>
	gender = <optional / gender> #defalut = random
type = <random / key>
	skill = <random / int>
	set_age = <int>
 traits = { trait = <key> trait = <key> }
}
Supported Scopes: country

remove_saved_leader - Removes a saved leader for the scoped country with a lookup key
remove_saved_leader = <string>
Supported Scopes: country

activate_saved_leader - Moves a saved leader to the active for the scoped country with a lookup key
activate_saved_leader = {
	key = <string>
	add_to_owned=<yes/no> #default yes
	effect = {...}
}
Supported Scopes: country

add_relic - Adds the specified relic to the scoped country. add_relic = <relic_key>
Supported Scopes: country

remove_relic - Removes the specified relic from the scoped country. remove_relic = <relic_key>
Supported Scopes: country

delete_megastructure - Deletes the target mega structure (no death graphics)
delete_megastructure = <target>
Supported Scopes: all

add_random_research_option - Adds s random tech research option to the scoped country's tech view list, permanent until researched. if none applicable it runs fail_effects
add_random_research_option = {
    category = <string>
    area = <key>
    tier = <int>
   add_progress = <num>
    ignore_prereqs = <yes/no> #default no
    ignore_rare = <yes/no> #default yes
    fail_effects = {}
}
Supported Scopes: country

copy_random_tech_from - Adds a random tech from the target country within the given category and tech area constraints. The country must be able to research said tech (weight > 0, fulfils potential trigger)
copy_random_tech_from = {
	who = <country>
	category = computing (optional)
	area = physics (optional)
	progress = 0.5 (optional: this makes it grant the tech option rather than the whole tech)
}
Supported Scopes: country

add_asteroid_belt - Adds an asteroid belt at the distance in the scope.
Example:
add_asteroid_belt = {
	radius=<desired radius>
	type=<asteroid belt type key>
}
Supported Scopes: galactic_object

set_asteroid_belt - Sets an asteroid belt at the distance in the scope.
Example:
set_asteroid_belt = {
	radius=<desired radius>
	type=<asteroid belt type key>
}
Supported Scopes: galactic_object

fleet_action_research_special_project - Sends a fleet to research a special project
fleet_action_research_special_project = { special_project = test_project target = event_target:project_planet }
Supported Scopes: fleet

remove_last_built_district - Removes last built district from the scoped planet
remove_last_built_district = yes
Supported Scopes: planet

remove_all_districts - Removes all districts from the scoped planet
remove_all_districts = yes
Supported Scopes: planet

remove_district - Removes a specific district from the scoped planet
remove_district = <key>
Supported Scopes: planet

add_district - Begins construction of a specific district on the scoped planet
add_district = <key>
Supported Scopes: planet

enable_on_market - Enables a resource on the Galactic Market
enable_on_market = <resource_key>
Supported Scopes: all

enable_galactic_market - Enables the galactic market. enable_galactic_market = <yes/no> 
Supported Scopes: country

add_timed_trait - Adds a specific trait to the scoped leader for a specific duration
add_timed_trait = { trait = <trait> days/months/years = <value> }
Supported Scopes: leader

create_archaeological_site - Creates a archaeological site associated with the scope object
create_archaeological_site = <site type>
Supported Scopes: megastructure planet ship fleet galactic_object ambient_object starbase

destroy_archaeological_site - Destroys a archaeological site in right hand site event target
destroy_archaeological_site = <event target>
Supported Scopes: all

add_stage_clues - Adds clues to the current stage of an archaeological or first contact site
add_stage_clues = <int>
Supported Scopes: archaeological_site first_contact

add_expedition_log_entry - Adds clues to the current stage of a archaeological site
add_stage_clues = <int>
Supported Scopes: archaeological_site

reset_current_stage - Resets the current stage
reset_current_stage = yes/no
yes = also randomize new difficulty if stage allows that.
no = does not change difficulty
Supported Scopes: archaeological_site

finish_current_stage - Finish the current stage
finish_current_stage = yes/no/<country>
yes = trigger stage completed for each stage and current excavator.
no = do not trigger any stage completed
country = use this country instead of excavator, no stage complete will be triggered.
Supported Scopes: archaeological_site

finish_site - Finish the whole archaeological site
finish_site	 = yes/no/<country>
yes = trigger stage completed for each stage and current excavator.
no = do not trigger any stage completed
country = use this country instead of excavator, no stage complete will be triggered.
Supported Scopes: archaeological_site

set_site_progress_locked - Locks or unlocks the progress of a site
set_site_progress_locked = yes/no
Supported Scopes: archaeological_site first_contact

custom_tooltip_with_params - Displays a specific localization string with parameters in tooltip
custom_tooltip_with_params = {
	description = <loc key>
	description_parameters = {
		<value key> = <string/int/num/bool>
	}
}
Supported Scopes: all

set_federation_law - Sets the given law for the scoped federation
set_federation_law = <federation law>
Supported Scopes: federation

add_to_galactic_community - Tries to add the scoped country to the Galactic Community
add_to_galactic_community = yes/no
Supported Scopes: country

add_to_galactic_community_no_message - Tries to add the scoped country to the Galactic Community without producing member joining notifications.
add_to_galactic_community_no_message = yes/no
Supported Scopes: country

remove_from_galactic_community - Tries to remove the scoped country from the Galactic Community
remove_from_galactic_community = yes/no
Supported Scopes: country

add_to_galactic_council - Tries to add the scoped country to the Galactic Council
add_to_galactic_council = yes/no
Supported Scopes: country

remove_from_galactic_council - Tries to remove the scoped country from the Galactic Council
remove_from_galactic_council = yes/no
Supported Scopes: country

steal_relic - Steal all/a random/a specific relic from a target country
steal_relic = { target = <Target Country> relic = <relic_name/all/random>
Supported Scopes: country

country_list_tooltip - Prints a list of the countries that match the limit triggers in a tooltip, each separated by a line break.
country_list_tooltip = { limit = { <triggers> } }
Supported Scopes: all

owned_planet_list_tooltip - Prints a list of the country's planets that match the limit triggers in a tooltip, each separated by a line break.
owned_planet_list_tooltip = { limit = { <triggers> } }
Supported Scopes: country

owned_pop_faction_list_tooltip - Prints a list of the country's pop factions that match the limit triggers in a tooltip, each separated by a line break.
owned_pop_faction_list_tooltip = { limit = { <triggers> } }
Supported Scopes: country

owned_leader_list_tooltip - Prints a list of the country's leaders that match the limit triggers in a tooltip, each separated by a line break.
owned_leader_list_tooltip = { limit = { <triggers> } }
Supported Scopes: country

owned_fleet_list_tooltip - Prints a list of the country's fleets that match the limit triggers in a tooltip, each separated by a line break.
owned_fleet_list_tooltip = { limit = { <triggers> } divider_tooltip = localisation }
Supported Scopes: country

set_cooldown - Locks the leader in its current role for the next X days.
set_cooldown = int
Supported Scopes: leader

add_federation_experience - Adds experience to the scoped federation
add_federation_experience = <federation experience>
Supported Scopes: federation

set_federation_type - Sets federation type to the scoped federation
set_federation_type = <federation type>
Supported Scopes: federation

set_federation_succession_type - Sets federation succession type to the scoped federation
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_federation_succession_type = <federation succession type>
Federation succession types: strongest/diplomatic_weight/rotation/challenge/random
Supported Scopes: federation

set_federation_succession_term - Sets federation succession term to the scoped federation
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_federation_succession_type = <federation succession term>
Federation succession terms: status_change/years_10/years_20/years_30/years_40
Supported Scopes: federation

set_only_leader_builds_fleets - Sets exclusive right to build fleets by federation leader
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_only_leader_builds_fleets = <yes/no>

Supported Scopes: federation

set_allow_subjects_to_join - Sets right for subjects to join federations
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_allow_subjects_to_join = <yes/no>

Supported Scopes: federation

set_equal_voting_power - Sets different voting weight
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_equal_voting_power = <yes/no>

Supported Scopes: federation

set_diplomacy_action_setting - Sets diplomatic action custom setting
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_diplomacy_action_setting = {
	action = <action_key>
	settings = {
	tvote_type = default
	}
}
Supported Scopes: federation

set_free_migration - Sets unified migration flag for federation
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_free_migration = <yes/no>

Supported Scopes: federation

set_federation_settings - Sets diplomatic action custom setting
Please don't use outside law on_enact, functional effect! Use set_federation_law and has_federation_law instead.
set_federation_settings = {
	<setting> = <value>
	...
}
Supported Scopes: federation

add_associate_member - Add specified country as an associate member
add_associate_member = { who = <target> override_requirements = yes/no }
Supported Scopes: federation

remove_associate_member - Removes a specific associate member from the federation
remove_associate_member = { who = <country> override_requirements = yes/no }
Supported Scopes: federation

add_cohesion - Add cohesion to the federation
add_cohesion = <value>

Supported Scopes: federation

set_council_size - Sets the number of seats on the Galactic Council
set_council_size = <int>
Supported Scopes: all

increase_council_size - Increases the number of seats on the Galactic Council by 1
increase_council_size = yes/no
Supported Scopes: all

decrease_council_size - Decreases the number of seats on the Galactic Council by 1
decrease_council_size = yes/no
Supported Scopes: all

set_council_veto - Sets whether council members can veto resolutions or not
set_council_veto = yes/no
Supported Scopes: all

set_council_emergency_measures - Sets whether council members can propose emergency measures or not
set_council_emergency_measures = yes/no
Supported Scopes: all

add_permanent_councillor - Gives provided country a permanent position on the Galactic Council
add_permanent_councillor = yes/no
Supported Scopes: country

remove_permanent_councillor - Remove the provided country from their permanent council position
remove_permanent_councillor = yes/no
Supported Scopes: country

set_sector_capital - Sets the scoped planet to be the capital of the sector it is part of. If used in the capital sector, it will shift the empire capital. Warning: Experimental, may have unintended consequences.
set_sector_capital = yes
Supported Scopes: planet

set_sector_focus - Sets the sector's focus
set_sector_focus = <sector focus>
Supported Scopes: sector

set_colony_type - Sets the colony's designation type
set_colony_type = <colony type>
Supported Scopes: planet

complete_special_project - Completes a specific special project for the country, firing the on complete effects
complete_special_project = { type = <project key> location = <target> }
Supported Scopes: country

set_government_cooldown - Locks the country's government for a given period of days, the default cooldown, or unlocks it.
set_government_cooldown = 500/default/no
Supported Scopes: country

change_colony_foundation_date - Changes the colony foundation date (affecting on_colony_X_years pulses) by a specific number of days. Use with care, you can probably break things with this!
change_colony_foundation_date = <+/- int>
Supported Scopes: planet

log_error - Prints a message to error.log for debugging purposes.
Supported Scopes: all

add_intel - Adds the defined amount of intel toward the target empire add_intel = { amount = <float> who = <target> }
Supported Scopes: country

fire_on_action - Fires a made-up on_action.
fire_on_action = { on_action = <string> scopes = { from = X fromfrom = Y } }
Supported Scopes: all

set_first_contact_stage - Sets the given stage for the scoped first contact
set_first_contact_stage = <stage name>
Supported Scopes: first_contact

finish_current_operation_stage - Finish the current operation phase
finish_current_operation_stage = yes/no
yes = trigger stage completed for each stage and current excavator.
no = do not trigger any stage completed
Supported Scopes: espionage_operation

set_mia - Sets the current fleet to go missing in action and return home.
set_mia = yes
Supported Scopes: fleet

create_espionage_asset - Creates espionage asset within a given spy network
create_espionage_asset = {
	type = <espionage asset type>
	effect = { <effects executed on asset> }
}
Supported Scopes: spy_network

destroy_espionage_asset - Destroys espionage asset within a given spy network/operation
destroy_espionage_asset = <esspionage asset type>
Supported Scopes: spy_network espionage_operation

set_espionage_operation_progress_locked - Locks or unlocks the progress of an espionage operation
set_espionage_operation_progress_locked = yes/no
Supported Scopes: espionage_operation

unassign_espionage_asset - Unassignes espionage asset from the scope operation to owning spy network
unassign_espionage_asset = <esspionage asset type>
Supported Scopes: espionage_operation

assign_espionage_asset - Assigns espionage asset to the scope operation from owning spy network
assign_espionage_asset = <esspionage asset type>
Supported Scopes: espionage_operation

set_espionage_operation_flag - Sets an arbitrarily-named flag on the scoped espionage operation
set_espionage_operation_flag = <key>
Supported Scopes: espionage_operation

remove_espionage_operation_flag - Removes a flag from the scoped espionage operation
remove_espionage_operation_flag = <key>
Supported Scopes: espionage_operation

complete_crisis_objective - Gives the player the reward for the specified crisis objective
complete_crisis_objective = <objective>
Supported Scopes: country

espionage_operation_event - Fires a espionage event event for the scoped object, with optional DAYS and RANDOM delay
espionage_operation_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: espionage_operation

join_war_on_side - Joins the war on the specified side.
join_war_on_side = { war = <target> side = attackers/defenders/<country> }
Supported Scopes: country

remove_random_starbase_building - Remove a number of random building(s) matching/not matching a type from the starbase
remove_random_starbase_building = {
	type = <starbase building> ( optional. default: all )
	count = <int> (optional. default: 1 )
}
Supported Scopes: starbase

remove_random_starbase_module - Remove a number of random module(s) matching/not matching a type from the starbase
remove_random_starbase_module = {
	type = <starbase module> ( optional. default: all )
	count = <int> (optional. default: 1 )
}
Supported Scopes: starbase

set_timed_espionage_operation_flag - Sets an arbitrarily-named flag on the scoped espionage operation for a set duration
set_timed_espionage_operation_flag = { flag = <key> days = <int> }
Supported Scopes: espionage_operation

destroy_espionage_operation - Destroys a espionage operation site in right hand site event target
destroy_espionage_operation = <event target>
Supported Scopes: all

add_espionage_information - Adds information to the current stage of an espionage operation
add_espionage_information = <value>
Supported Scopes: espionage_operation

add_victory_score - Adds victory score to a country
add_victory_score = { source=<loc_key> score=<value> }
Supported Scopes: country

store_galactic_community_leader_backup_data - Stores a copy of the specified data of the Galactic Custodian/Emperor. The values default to 'no'.
store_galactic_community_leader_backup_data = {
flag = <yes/no>
room = <yes/no>
name = <yes/no
ethics = <yes/no>
government = <yes/no>
}
Supported Scopes: all

restore_galactic_community_leader_backup_data - Retores backed up data to the Galactic Custodian/Emperor
restore_galactic_community_leader_backup_data = <yes/no>
Supported Scopes: all

activate_crisis_progression - Activates crisis progression for the country
activate_crisis_progression = yes
Supported Scopes: country

room_name_override - Sets the room background of the empire. Provide an empty string to remove the override.
room_name_override = <room_name>
Supported Scopes: country

set_ai_personality - Sets the AI personality of a country to a new one
set_ai_personality=<personality>
Supported Scopes: country

add_custodian_term_days - Increase the current Custodian term time
add_custodian_term_days = <days>

Supported Scopes: all

set_custodian_term_days - Set the current Custodian term time. -1 will make the Custodianship permanent.
set_custodian_term_days = <days>

Supported Scopes: all

pass_targeted_resolution - Immediately passes the first found (oldest) proposed/voting for/failed resolution OR a new resolution of this type that has the specified target. Ignores whether the target is valid or not.
pass_targeted_resolution = { resolution = <resolution type> target = <target>
Supported Scopes: country

set_update_modifiers_batch - Disables modifier system to do full updates between Begin and End.
On end it will trigger a full update of any dirty modifiers.
Begin: set_update_modifiers_batch = begin
End: set_update_modifiers_batch = end
Supported Scopes: all

validate_planet_buildings_and_districts - Checks whether the planets and districts on the planet are valid (their potential triggers are fulfilled), removes or replaces them if not.
validate_planet_buildings_and_districts = yes
Supported Scopes: planet

country_event - Fires a country event for the scoped country, with optional DAYS and RANDOM delay
country_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: country

planet_event - Fires a planet event for the scoped planet, with optional DAYS and RANDOM delay
planet_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: planet

random - All enclosed effects may or may not be executed depending on set chance
random = { chance = 50 <effects> }
Supported Scopes: all

create_ship_design - Creates a new ship design for use with last_created_design target
create_ship_design = { design = <key> ftl = <target, optional, sets FTL drive to target country's> }
Supported Scopes: all

change_government - Change the scoped country's government authority and/or civics
change_government = random
or
change_government = {
	authority = random / <key>
	civics = random / { civic = <key> civic = random }
cooldown = no (default: yes)
remove_invalid_civics = yes (default: no)
}
Supported Scopes: country

ship_event - Fires a ship event for the scoped ship, with optional DAYS and RANDOM delay
ship_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: ship

pop_event - Fires a pop event for the scoped pop, with optional DAYS and RANDOM delay
pop_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: pop

enable_special_project - Enables a specific special research project for target country at a specific location (should be same as the current scope where possible)
enable_special_project = { name = <project key> owner = <target, default = root> location = <target, ideally THIS (that is default)> }
Supported Scopes: all

add_resource - Adds specific resource to the stockpile for the country scope:
add_resource = {
	<resource_name_1> = <value_1>
	<resource_name_2> = <value_2>
	...
	mult = <variable> (optional: multiplies all gained resources by a variable)
}
Supported Scopes: country

fleet_event - Fires a fleet event for the scoped fleet, with optional DAYS and RANDOM delay
fleet_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: fleet

random_planet_within_border - Iterate through each planet within the current empire's borders - executes the enclosed effects on one of them for which the limit triggers return true
random_planet_within_border = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

pop_remove_ethic - Removes a specific ethic from the scoped pop
pop_remove_ethic = <key>
Supported Scopes: pop

create_rebels - Creates a rebellion
create_rebels = {
	name = <random / string>
	authority = <random / key>
	civics = random / { civic = <key> civic = random }
	species = <target>
	ethos = <random / { ethic = <key> ethic = <key> }
}
Supported Scopes: planet

cancel_terraformation - Cancels terraformation of the scoped planet
cancel_terraformation = yes
Supported Scopes: planet

set_primitive_age - Sets a 'primitive age' for the scoped (primitive, pre-FTL) country
set_primitive_age = renaissance_age
Supported Scopes: country

while - Repeats enclosed effects while limit criteria are met or until set iteration count is reached
while = { limit = { <triggers> } <effects> }
 while = { count = [3|Variable] <effects> }
Supported Scopes: all

clear_blocker - Clears scoped deposit blocker and fires its on_cleared effect
clear_blocker = yes
Supported Scopes: deposit

every_system_in_cluster - Executes enclosed effects on every system in the cluster that meet the limit criteria
every_system_in_cluster = { limit = { <triggers> } <effects> }
Supported Scopes: all

create_cluster - Creates a cluster centered around the specified spatial object
Supported Scopes: all

remove_army - Removes the scoped army
remove_army = yes
Supported Scopes: army

prevent_anomaly - Disables or enables anomaly generation for the scoped planet
prevent_anomaly = yes
Supported Scopes: planet

observation_outpost - Executes enclosed effects on every observation post in the game that meets the limit criteria
observation_outpost = { limit = { <triggers> } <effects> }
Supported Scopes: planet country

add_deposit - Adds resource deposit to the scoped planet
add_deposit = <key/random>
Supported Scopes: planet

clear_deposits - Removes all deposits from the scoped planet
clear_desposits = yes
Supported Scopes: planet

set_country_type - Changes the country type of the scoped country
set_country_type = <key>
Supported Scopes: country

set_age - Sets the age of the scoped leader
set_age = <int>
Supported Scopes: leader

conquer - Conquers the planet by setting its owner to target country and adding an unhappiness modifier
conquer = <target country>
Supported Scopes: planet

pop_faction_event - Fires a pop faction event for the scoped pop faction, with optional DAYS and RANDOM delay
pop_faction_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: pop_faction

set_pop_faction_flag - Sets an arbitrarily-named flag on the scoped pop's faction/pop faction
set_pop_faction_flag = <key>
Supported Scopes: pop pop_faction

remove_pop_faction_flag - Removes a flag from the scoped pop's faction/pop faction
remove_pop_faction_flag = <key>
Supported Scopes: pop pop_faction

set_timed_pop_faction_flag - Sets an arbitrarily-named flag on the scoped pop faction for a set duration
set_timed_pop_faction_flag = { flag = <key> days = <int> }
Supported Scopes: pop pop_faction

add_tech_progress - Gives percentage progress (0.0-1.0) in a specific tech to the scoped country
add_tech_progress = { tech = <key> progress = <float> }
Supported Scopes: country

abort_special_project - Aborts a specific special project for the country, removing it from the situation log
abort_special_project = { type = <project key> location = <target> }
Supported Scopes: country

every_pop_faction - Iterate through all the country's pop factions - executes the enclosed effects on all of them for which the limit triggers return true
every_pop_faction = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_pop_faction - Iterate through all the country's pop factions - executes the enclosed effects on one of them for which the limit triggers return true
random_pop_faction = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

observer_event - Fires an observer event for all observers.
Supported Scopes: all

set_custom_capital_location - Sets a custom spatial object as custom country capital location.
set_custom_capital_location = <target>
Supported Scopes: country

spawn_planet - Spawns a planet in a system.
Supported Scopes: galactic_object

spawn_megastructure - Spawns a mega structure in a system.
spawn_megastructure = {
	type = ring_world_ruined
	name = <string>
	owner = <target>
	planet = <planet/star target>
	coords_from = <target> (use this or 'planet' to set the location)
	graphical_culture = <target>
	orbit_distance = 50
	orbit_angle = 50
}
Supported Scopes: galactic_object

remove_megastructure - Removes a mega structure.
remove_megastructure = <target mega structure>
Supported Scopes: all

trigger_megastructure_icon - if a planet has trigger_megastructure_icon = yes then the map icon for the star will show a megastructure icon
Supported Scopes: planet

run_ai_strategic_data - Recomputes ALL strategic data for AI = yes
Supported Scopes: country

add_static_war_exhaustion - Adds static war exhaustion, scaled with value_for_planet_destruction, to owner of the battle location 
 owner = { add_static_war_exhaustion = { attacker = <country> location = <planet> value_for_planet_destruction = <0.0-1.0> #scales the amount WE that is added }}
Supported Scopes: country

set_planet_size - Sets the planet size to a specified number
set_planet_size = <int>
Supported Scopes: planet

run_ai_strategic_war_data - Recomputes strategic war ( attack / defense ) data for AI = yes
Supported Scopes: country

expire_site_event - Manually flags an archaeological event as expired
expire_site_event = ancrel.7003
Supported Scopes: archaeological_site

pass_resolution - Immediately passes the first found (oldest) proposed/voting for/failed resolution OR a new resolution of this type.
pass_resolution = <resolution type>
Supported Scopes: country

pass_resolution_no_cooldown - Immediately passes the first found (oldest) proposed/voting for/failed resolution OR a new resolution of this type. Skips the cooldown on the relevant category.
pass_resolution_no_cooldown = <resolution type>
Supported Scopes: country

first_contact_event - Fires a first contact event for the scoped first contact site, with optional DAYS and RANDOM delay
first_contact_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: first_contact

finish_first_contact - Ends the First Contact
finish_first_contact = yes
Supported Scopes: first_contact

set_galactic_custodian - Sets whether or not the scoped country is the Galactic Custodian
set_galactic_custodian = yes/no
Supported Scopes: country

set_galactic_emperor - Sets whether or not the scoped country is the Galactic Emperor
set_galactic_emperor = yes/no
Supported Scopes: country

add_imperial_authority - Add imperial_authority
add_imperial_authority = <value>

Supported Scopes: all

add_stage_modifier - Adds a specific modifier to the current espionage operation stage for a set duration or until stage is changed
add_stage_modifier = { modifier = <key> days = <int, -1 means it never expires> }
Supported Scopes: espionage_operation

remove_stage_modifier - Removes a specific modifier from the espionage operation current stage
remove_stage_modifier = <key>
Supported Scopes: espionage_operation

add_intel_report - Adds the intel level for the category selected. Default duration (0) is forever.
add_intel_report = { category = <string> level = <int> days = <int> who = <target> }
Supported Scopes: country

set_galactic_defense_force - Sets whether the Galactic Defense force or Imperial Armada exists
set_galactic_defense_force = yes/no
Supported Scopes: all

clear_intel_report - Removes all the intel reports related to the provided category.
clear_intel_report = { category = <string> who = <target> }
Supported Scopes: country

starbase_event - Fires a starbase event for the scoped starbase
starbase_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: starbase

system_event - Fires a system event for the scoped system
system_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: galactic_object

leader_event - Fires a leader event for the scoped leader
leader_event = {
	id = <id>
	days = x (optional: specify delay)
	random = y (optional: specify random delay, capped at value)
	scopes = { from = fromfrom } (optional: specify scope overrides)
}
Supported Scopes: leader

transfer_galactic_defense_force_fleets - Moves all owned GDF fleets to the target.
transfer_galactic_defense_force_fleets = <target>
Supported Scopes: country

cancel_resolution - Immediately cancels/removes the latest active/passed/proposed/voting for/failed resolution of this type
cancel_resolution = <resolution type>
Supported Scopes: country

add_spy_network_level - Adds levels to the current Spy Network
add_spy_network_level = <int>
Supported Scopes: spy_network

every_system_planet - Iterate through each planet in the current system - executes the enclosed effects on all of them for which the limit triggers return true
every_system_planet = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

join_alliance - Join federation with target
join_alliance = { who = <target> override_requirements = yes/no }
Supported Scopes: country

complete_tutorial_step - Create and sends an telemetry event keeping track of the tutorial steps for the current game
Supported Scopes: all

set_emperor_can_change_council_members - Sets whether the Galactic Emperor can change Imperial Council members or not
set_emperor_can_change_council_members = yes/no
Supported Scopes: all

create_leader - Creates a new leader for the scoped country
create_leader = {
	name = <random / string>
	species = <target / key>
	gender = <optional / gender> #defalut = random
type = <random / key>
	skill = <random / int>
	set_age = <int>
 traits = { trait = <key> trait = <key> }
}
Supported Scopes: country

set_disabled - Enables or disables the scoped ship
set_disabled = no
Supported Scopes: ship

else - Executes enclosed effects if limit criteria of preceding 'if' or 'else_if' is not met
if = { limit = { <triggers> } <effects> }
else = { <effects> }
Supported Scopes: all

log - Prints a message to game.log for debugging purposes.
Supported Scopes: all

debug_break - Trigger an assertion to stop the debugger when encountering this effect; argument is ignored
debug_break = yes
Supported Scopes: all

inverted_switch - Executes the first appropriate effect set for a specific trigger treated as NOT.
inverted_switch = {
	trigger = <trigger>
	<corresponding key/bool/int> = { <effect> }
	<corresponding key/bool/int> > (less/greater than appear 'reversed') { <effect> }
	default = { <effect> }
}
Supported Scopes: all

random_owned_army - Iterate through each army that is owned by the country - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_army = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_owned_army - Iterate through each army that is owned by the country - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_army = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_planet_army - Iterate through each army on the planet (not in ground combat) belonging to the planet owner - executes the enclosed effects on one of them for which the limit triggers return true
random_planet_army = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet

every_planet_army - Iterate through each army on the planet (not in ground combat) belonging to the planet owner - executes the enclosed effects on all of them for which the limit triggers return true
every_planet_army = { limit = { <triggers> } <effects> }
Supported Scopes: planet

random_ground_combat_defender - Iterate through each army currently defending the planet in ground combat - executes the enclosed effects on one of them for which the limit triggers return true
random_ground_combat_defender = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet

every_ground_combat_defender - Iterate through each army currently defending the planet in ground combat - executes the enclosed effects on all of them for which the limit triggers return true
every_ground_combat_defender = { limit = { <triggers> } <effects> }
Supported Scopes: planet

random_ground_combat_attacker - Iterate through each army currently attacking the planet in ground combat - executes the enclosed effects on one of them for which the limit triggers return true
random_ground_combat_attacker = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet

every_ground_combat_attacker - Iterate through each army currently attacking the planet in ground combat - executes the enclosed effects on all of them for which the limit triggers return true
every_ground_combat_attacker = { limit = { <triggers> } <effects> }
Supported Scopes: planet

random_relation - Iterate through all relations - executes the enclosed effects on one of them for which the limit triggers return true
random_relation = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_relation - Iterate through all relations - executes the enclosed effects on all of them for which the limit triggers return true
every_relation = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_neighbor_country - Iterate through all neighbor countries - executes the enclosed effects on one of them for which the limit triggers return true
random_neighbor_country = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_neighbor_country - Iterate through all neighbor countries - executes the enclosed effects on all of them for which the limit triggers return true
every_neighbor_country = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_bordering_country - Iterate through all bordering countries of a system - executes the enclosed effects on one of them for which the limit triggers return true
random_bordering_country = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

every_bordering_country - Iterate through all bordering countries of a system - executes the enclosed effects on all of them for which the limit triggers return true
every_bordering_country = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

random_rival_country - Iterate through all countries rivalled by the scoped country - executes the enclosed effects on one of them for which the limit triggers return true
random_rival_country = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_rival_country - Iterate through all countries rivalled by the scoped country - executes the enclosed effects on all of them for which the limit triggers return true
every_rival_country = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_federation_ally - Iterate through all countries in a federation with the scoped country - executes the enclosed effects on one of them for which the limit triggers return true
random_federation_ally = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_federation_ally - Iterate through all countries in a federation with the scoped country - executes the enclosed effects on all of them for which the limit triggers return true
every_federation_ally = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_spynetwork - Iterate through each spynetwork - executes the enclosed effects on one of them for which the limit triggers return true
random_spynetwork = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country no_scope

every_spynetwork - Iterate through each spynetwork - executes the enclosed effects on all of them for which the limit triggers return true
every_spynetwork = { limit = { <triggers> } <effects> }
Supported Scopes: country no_scope

random_espionage_operation - Iterate through each espionage operation - executes the enclosed effects on one of them for which the limit triggers return true
random_espionage_operation = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country no_scope spy_network

every_espionage_operation - Iterate through each espionage operation - executes the enclosed effects on all of them for which the limit triggers return true
every_espionage_operation = { limit = { <triggers> } <effects> }
Supported Scopes: country no_scope spy_network

random_espionage_asset - Iterate through each espionage asset - executes the enclosed effects on one of them for which the limit triggers return true
random_espionage_asset = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: no_scope spy_network espionage_operation

every_espionage_asset - Iterate through each espionage asset - executes the enclosed effects on all of them for which the limit triggers return true
every_espionage_asset = { limit = { <triggers> } <effects> }
Supported Scopes: no_scope spy_network espionage_operation

random_federation - Iterate through each federation - executes the enclosed effects on one of them for which the limit triggers return true
random_federation = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_federation - Iterate through each federation - executes the enclosed effects on all of them for which the limit triggers return true
every_federation = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_first_contact - Iterate through each first contact (both active and complete) that this country is engaging in - executes the enclosed effects on one of them for which the limit triggers return true
random_first_contact = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_first_contact - Iterate through each first contact (both active and complete) that this country is engaging in - executes the enclosed effects on all of them for which the limit triggers return true
every_first_contact = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_active_first_contact - Iterate through each active (non-completed) first contact that this country is engaging in - executes the enclosed effects on one of them for which the limit triggers return true
random_active_first_contact = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_active_first_contact - Iterate through each active (non-completed) first contact that this country is engaging in - executes the enclosed effects on all of them for which the limit triggers return true
every_active_first_contact = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_galaxy_fleet - Iterate through each fleet in the entire game - executes the enclosed effects on one of them for which the limit triggers return true
random_galaxy_fleet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_galaxy_fleet - Iterate through each fleet in the entire game - executes the enclosed effects on all of them for which the limit triggers return true
every_galaxy_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_combatant_fleet - Iterate through each fleet this fleet is in combat with - executes the enclosed effects on one of them for which the limit triggers return true
random_combatant_fleet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: fleet

every_combatant_fleet - Iterate through each fleet this fleet is in combat with - executes the enclosed effects on all of them for which the limit triggers return true
every_combatant_fleet = { limit = { <triggers> } <effects> }
Supported Scopes: fleet

random_fleet_in_orbit - Iterate through each fleet orbiting the current planet/starbase/megastructure - executes the enclosed effects on one of them for which the limit triggers return true
random_fleet_in_orbit = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: megastructure planet starbase

every_fleet_in_orbit - Iterate through each fleet orbiting the current planet/starbase/megastructure - executes the enclosed effects on all of them for which the limit triggers return true
every_fleet_in_orbit = { limit = { <triggers> } <effects> }
Supported Scopes: megastructure planet starbase

random_pool_leader - Iterate through each leader that is recruitable for the country - executes the enclosed effects on one of them for which the limit triggers return true
random_pool_leader = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_pool_leader - Iterate through each leader that is recruitable for the country - executes the enclosed effects on all of them for which the limit triggers return true
every_pool_leader = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_envoy - Iterate through each envoy available to the country - executes the enclosed effects on one of them for which the limit triggers return true
random_envoy = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_envoy - Iterate through each envoy available to the country - executes the enclosed effects on all of them for which the limit triggers return true
every_envoy = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_megastructure - Iterate through each megastructure - executes the enclosed effects on one of them for which the limit triggers return true
random_megastructure = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_megastructure - Iterate through each megastructure - executes the enclosed effects on all of them for which the limit triggers return true
every_megastructure = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_owned_megastructure - Iterate through each owned megastructure - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_megastructure = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_owned_megastructure - Iterate through each owned megastructure - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_megastructure = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_system_megastructure - Iterate through each megastructure in system - executes the enclosed effects on one of them for which the limit triggers return true
random_system_megastructure = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_system_megastructure - Iterate through each megastructure in system - executes the enclosed effects on all of them for which the limit triggers return true
every_system_megastructure = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_member - Iterate through each member of the federation - executes the enclosed effects on one of them for which the limit triggers return true
random_member = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: federation

every_member - Iterate through each member of the federation - executes the enclosed effects on all of them for which the limit triggers return true
every_member = { limit = { <triggers> } <effects> }
Supported Scopes: federation

random_associate - Iterate through each associate member of the federation - executes the enclosed effects on one of them for which the limit triggers return true
random_associate = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: federation

every_associate - Iterate through each associate member of the federation - executes the enclosed effects on all of them for which the limit triggers return true
every_associate = { limit = { <triggers> } <effects> }
Supported Scopes: federation

random_owned_planet - Iterate through each inhabited planet owned by the current empire - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_planet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country sector

every_owned_planet - Iterate through each inhabited planet owned by the current empire - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_planet = { limit = { <triggers> } <effects> }
Supported Scopes: country sector

random_controlled_planet - Iterate through each inhabited planet controlled by the current empire - executes the enclosed effects on one of them for which the limit triggers return true
random_controlled_planet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_controlled_planet - Iterate through each inhabited planet controlled by the current empire - executes the enclosed effects on all of them for which the limit triggers return true
every_controlled_planet = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_galaxy_planet - Iterate through each planet ANYWHERE in the game; warning: resource intensive! - executes the enclosed effects on one of them for which the limit triggers return true
random_galaxy_planet = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_galaxy_planet - Iterate through each planet ANYWHERE in the game; warning: resource intensive! - executes the enclosed effects on all of them for which the limit triggers return true
every_galaxy_planet = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_species_pop - Iterate through each pop that belongs to this species; warning: resource-intensive! - executes the enclosed effects on one of them for which the limit triggers return true
random_species_pop = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: species

every_species_pop - Iterate through each pop that belongs to this species; warning: resource-intensive! - executes the enclosed effects on all of them for which the limit triggers return true
every_species_pop = { limit = { <triggers> } <effects> }
Supported Scopes: species

random_galaxy_sector - Iterate through all sectors in the game - executes the enclosed effects on one of them for which the limit triggers return true
random_galaxy_sector = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_galaxy_sector - Iterate through all sectors in the game - executes the enclosed effects on all of them for which the limit triggers return true
every_galaxy_sector = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_owned_sector - Iterate through every owned sector - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_sector = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_owned_sector - Iterate through every owned sector - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_sector = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_ship_in_system - Iterate through each ship in the current system - executes the enclosed effects on one of them for which the limit triggers return true
random_ship_in_system = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

every_ship_in_system - Iterate through each ship in the current system - executes the enclosed effects on all of them for which the limit triggers return true
every_ship_in_system = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

random_owned_pop_species - Iterate through each species of a country's owned pops - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_pop_species = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_owned_pop_species - Iterate through each species of a country's owned pops - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_pop_species = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_galaxy_species - Check if any species in the galaxy meet the specified criteria - executes the enclosed effects on one of them for which the limit triggers return true
random_galaxy_species = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_galaxy_species - Check if any species in the galaxy meet the specified criteria - executes the enclosed effects on all of them for which the limit triggers return true
every_galaxy_species = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_owned_species - Check if any of the species <on the planet/in the country> meet the specified criteria - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_species = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet country

every_owned_species - Check if any of the species <on the planet/in the country> meet the specified criteria - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_species = { limit = { <triggers> } <effects> }
Supported Scopes: planet country

random_enslaved_species - Check if any of the species with enslaved pops <on the planet/in the country> meet the specified criteria - executes the enclosed effects on one of them for which the limit triggers return true
random_enslaved_species = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: planet country

every_enslaved_species - Check if any of the species with enslaved pops <on the planet/in the country> meet the specified criteria - executes the enclosed effects on all of them for which the limit triggers return true
every_enslaved_species = { limit = { <triggers> } <effects> }
Supported Scopes: planet country

random_owned_starbase - Iterate through every owned starbase - executes the enclosed effects on one of them for which the limit triggers return true
random_owned_starbase = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_owned_starbase - Iterate through every owned starbase - executes the enclosed effects on all of them for which the limit triggers return true
every_owned_starbase = { limit = { <triggers> } <effects> }
Supported Scopes: country

random_system - Iterate through all systems - executes the enclosed effects on one of them for which the limit triggers return true
random_system = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: all

every_system - Iterate through all systems - executes the enclosed effects on all of them for which the limit triggers return true
every_system = { limit = { <triggers> } <effects> }
Supported Scopes: all

random_system_within_border - Iterate through all systems within the country's or sector's borders - executes the enclosed effects on one of them for which the limit triggers return true
random_system_within_border = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country sector

every_system_within_border - Iterate through all systems within the country's or sector's borders - executes the enclosed effects on all of them for which the limit triggers return true
every_system_within_border = { limit = { <triggers> } <effects> }
Supported Scopes: country sector

random_neighbor_system_euclidean - Iterate through all a system's neigboring systems (by closeness, not by hyperlanes) - executes the enclosed effects on one of them for which the limit triggers return true
random_neighbor_system_euclidean = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: galactic_object

every_neighbor_system_euclidean - Iterate through all a system's neigboring systems (by closeness, not by hyperlanes) - executes the enclosed effects on all of them for which the limit triggers return true
every_neighbor_system_euclidean = { limit = { <triggers> } <effects> }
Supported Scopes: galactic_object

random_war_participant - Iterate through all war participants - executes the enclosed effects on one of them for which the limit triggers return true
random_war_participant = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: war

random_attacker - Iterate through all attackers in the current war - executes the enclosed effects on one of them for which the limit triggers return true
random_attacker = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: war

every_attacker - Iterate through all attackers in the current war - executes the enclosed effects on all of them for which the limit triggers return true
every_attacker = { limit = { <triggers> } <effects> }
Supported Scopes: war

random_defender - Iterate through all defenders in the current war - executes the enclosed effects on one of them for which the limit triggers return true
random_defender = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: war

every_defender - Iterate through all defenders in the current war - executes the enclosed effects on all of them for which the limit triggers return true
every_defender = { limit = { <triggers> } <effects> }
Supported Scopes: war

random_war - Iterate through all wars the country is engaged in - executes the enclosed effects on one of them for which the limit triggers return true
random_war = {
	limit = { <triggers> }
	weights = { (optional - adds weights to affect the chance a specific object is selected)
		base = float
		modifier = { <add/mult = float> <triggers> }
	}
	<effects>
}
Supported Scopes: country

every_war - Iterate through all wars the country is engaged in - executes the enclosed effects on all of them for which the limit triggers return true
every_war = { limit = { <triggers> } <effects> }
Supported Scopes: country


=================
[19:56:08][game_application.cpp:1910]: 
== SCOPE DOCUMENTATION ==
These work as context switches (links) in triggers and effects (e.g. 'owner = { <triggers/effects> }'), or as targets of triggers and effects (e.g. 'is_owned_by = from'). Dot scoping (e.g. root.owner.capital_scope) is allowed.
Complete list of scope changes:

target
orbit
planet
star
branch_office_owner
pop
species
assembling_species
built_species
declining_species
fleet
from
this
root
prev
capital_scope
owner
controller
fromfrom
prevprev
prevprevprev
prevprevprevprev
home_planet
last_created_fleet
owner_main_species
last_created_country
last_created_species
alliance
overlord
federation
research_station
mining_station
last_created_pop
spaceport
last_created_system
planet_owner
last_created_ambient_object
last_created_ship
orbital_station
last_created_leader
owner_species
fromfromfrom
last_created_army
envoy_location_country
contact_country
sector_capital
observation_outpost_owner
federation_leader
associated_federation
sector
pop_faction
last_created_pop_faction
unhappiest_pop
heir
default_pop_faction
fromfromfromfrom
megastructure
last_refugee_country
starbase
capital_star
system_star
no_scope
archaeological_site
excavator_fleet
reverse_first_contact
spynetwork
growing_species
attacker
defender
leader
solar_system
space_owner
ruler

=================
[19:56:08][game_application.cpp:1925]: 
== LOCALIZATION DOCUMENTATION ==
This is a list of all hardcoded scoped localization commands in the game. It does not include scripted locs (see game/customizable_localization).
In most cases, it is also possible to get the value of variables: [Scope.my_variable].
There are also several unscoped commands: GetDate, GetMidGameDate, GetLateGameDate, GetYear, LastKilledCountryName.
A single opening square bracket '[' will begin a scoped localization statement.
Two consecutive opening square brackets '[[' will escape it, making a single square bracket show up in text instead, i.e. '[[example]' in loc will display as '[example]' in-game.


--Country--
Promotions:
 Capital
 Ruler
 Heir
 Species
 Federation
Properties
 GetName
 GetAdj
 GetAdjective
 GetSpeciesName
 GetSpeciesAdj
 GetSpeciesNamePlural
 GetSpeciesClass
 GetSpeciesClassPlural
 GetAllianceName
 GetRulerName
 GetRulerTitle
 GetHeirName
 GetHeirTitle
 GetPersonalityName
 GetSpeciesNameInsult
 GetSpeciesNamePluralInsult
 GetSpeciesNameCompliment
 GetSpeciesNamePluralCompliment
 GetSpeciesSpawnName
 GetSpeciesSpawnNamePlural
 GetSpeciesOrganName
 GetSpeciesOrganNamePlural
 GetSpeciesMouthName
 GetSpeciesHandName
 GetSpeciesHandNamePlural
 GetSpeciesEarName
 GetSpeciesEarNamePlural
 GetSpeciesToothName
 GetSpeciesToothNamePlural
 GetRandomSpeciesSound
 GetHomeWorldName
 GetLastLostRelic
 GetLastReceivedRelic
 GetGovernmentName
 GetRealName
 GetCountryType

--Planet--
Promotions:
 Owner
 System
 MoonOf
 Sector
Properties
 GetName
 GetAdj
 GetStarName
 GetPlanetMoon
 GetPlanetMoonCap
 GetNebula
 GetOwnerName
 GetControllerName
 GetClassName
 GetClassAdj

--Ship (and Starbase)--
Promotions:
 Owner
 Fleet
Properties
 GetName
 GetNebula
 GetFleetName
 GetLeaderName
 GetStarName
 GetShipSizeName
 GetShipSizeNamePlural
 GetDesignName

--Pop--
Promotions:
 Planet
 Faction
 Species
Properties
 GetName
 GetSpeciesName
 GetSpeciesNamePlural
 GetSpeciesAdj

--System--
Promotions:
 Owner
 Sector
Properties
 GetName
 GetAdj
 GetNebula
 GetClassName

--Fleet--
Promotions:
 Owner
 Leader
 System
Properties
 GetName
 GetFleetName
 GetLeaderName
 GetStarName
 GetRulerName
 GetAdj

--Leader--
Promotions:
 Owner
 Species
Properties
 GetName
 GetRegnalName
 GetPopFactionName
 GetSubjectPronoun
 GetSheHe
 GetHeShe
 GetSubjectPronounCap
 GetSheHeCap
 GetHeSheCap
 GetObjectPronoun
 GetHerHim
 GetHimHer
 GetPossPronoun
 GetHerHis
 GetHisHer
 GetPossPronounCap
 GetHerHisCap
 GetHisHerCap
 GetReflexivePronoun
 GetHerselfHimself
 GetHimselfHerself
 GetRulerTitle
 GetTitle
 GetRulerName
 GetFirstName
 GetFirstNameFull
 GetSecondName
 GetAge

--Army--
Promotions:
 Owner
 Planet
 Leader
Properties
 GetName
 GetRulerName

--Ambient Object--
Promotions:
Properties
 GetName
 GetStarName
 GetNebula

--Species--
Promotions:
Properties
 GetName
 GetAdj
 GetNamePlural
 GetClass
 GetClassPlural
 GetNameInsult
 GetNamePluralInsult
 GetNameCompliment
 GetNamePluralCompliment
 GetSpawnName
 GetSpawnNamePlural
 GetOrganName
 GetOrganNamePlural
 GetMouthName
 GetHandName
 GetHandNamePlural
 GetEarName
 GetEarNamePlural
 GetToothName
 GetToothNamePlural
 GetRandomSpeciesSound

--War--
Promotions:
 MainDefender
 MainAttacker
Properties
 GetName
 GetNumPlayerFleetsGoneMIA

--Pop Faction--
Promotions:
 Owner
 Leader
Properties
 GetName

--Archaeological Site--
Promotions:
 Planet
 AmbientObject
 Fleet
 Ship
 GalacticObject
Properties

--Federation--
Promotions:
 Leader
Properties
 GetName

--First Contact--
Promotions:
 Leader
 Owner
 ContactCountry
 System
Properties
 GetName

--Espionage Operation--
Promotions:
 SpyNetwork
 Target
 Owner
Properties
 GetName

--Espionage Asset--
Promotions:
Properties
 GetName

--Spy Network--
Promotions:
 Target
 Owner
 Leader
Properties

--Deposit--
Promotions:
 Planet
Properties
 GetName

--Megastructure--
Promotions:
 Owner
 System
 Planet
Properties
 GetName

--Sector--
Promotions:
 Owner
 Capital
 Leader
Properties
 GetName
 GetFocus
 GetType

=================
